{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso Python desde Cero","text":"<ol> <li>Introducci\u00f3n</li> <li>\u00bfQu\u00e9 es Python?</li> <li>Instalaci\u00f3n de python</li> <li>Configuraci\u00f3n del entorno</li> <li>Conceptos b\u00e1sicos</li> <li>Variables</li> <li>Buenas pr\u00e1cticas de declaraci\u00f3n de variables</li> <li>Tipos de datos</li> <li>N\u00fameros<ol> <li>Enteros (int)</li> <li>Reales (float)</li> </ol> </li> <li>String (str)<ol> <li>Concatenaci\u00f3n de strings</li> </ol> </li> <li>Booleanos (bool)</li> <li>Conversi\u00f3n de datos</li> <li>Entrada de datos (input)</li> <li>Estructuras de decisi\u00f3n</li> <li>Estructura if<ol> <li>Operadores de relaci\u00f3n</li> </ol> </li> <li>Estructura if-else</li> <li>Estructura if-elif-else</li> <li>Operadores l\u00f3gicos</li> <li>Estructuras de repetici\u00f3n</li> <li>While<ol> <li>Break</li> <li>Continue</li> </ol> </li> <li>For<ol> <li>Rangos</li> </ol> </li> <li>M\u00f3dulos</li> <li>Math</li> <li>Random</li> <li>Colecciones</li> <li>Listas</li> <li>Tuplas</li> <li>Diccionarios</li> <li>Manejo de errores</li> <li>Atrapando errores (try-except)</li> <li>Funciones</li> <li>Funciones b\u00e1sicas</li> <li>Funciones con par\u00e1metros</li> <li>Funciones con par\u00e1metros por default</li> <li>Objetos<ol> <li>Objeto String y sus funciones</li> </ol> </li> <li>Manejo de archivos</li> <li>Proyectos<ol> <li>Generador de contrase\u00f1as seguras</li> <li>Organizador de archivos</li> <li>Detector de archivos repetidos</li> </ol> </li> </ol>"},{"location":"01_Introducci%C3%B3n/","title":"1 Introducci\u00f3n a Python","text":""},{"location":"01_Introducci%C3%B3n/#1-introduccion-a-python","title":"1. Introducci\u00f3n a Python","text":"<p>un lenguaje de programaci\u00f3n multiparadigma, ya que soporta parcialmente la orientaci\u00f3n a objetos, programaci\u00f3n imperativa y, en menor medida, programaci\u00f3n funcional. Es un lenguaje interpretado, din\u00e1mico y multiplataforma.</p>"},{"location":"01_Introducci%C3%B3n/#11-instalacion-de-python","title":"1.1 Instalaci\u00f3n de Python","text":"<p>Para instalar Python se entra a su sitio oficial https://www.python.org/</p> <p>Al momento de realizar esta documentaci\u00f3n estamos en la versi\u00f3n 3.12.1</p> <p></p> <p>Pero usaremos una versi\u00f3n estable de Python 3.7.3.</p>"},{"location":"01_Introducci%C3%B3n/#12-instalacion-de-python-en-windows","title":"1.2 Instalaci\u00f3n de Python en Windows","text":"<p>Se elige para la versi\u00f3n del sistema operativo. En esta caso vamos a suponer que tenemos una versi\u00f3n de Windows a 64 bits (x64). Elegimos la versi\u00f3n Windows x86-64 executable installer</p> <p></p> <p>Al ejecutar el instalador se debe activar la creaci\u00f3n del PATH (variable de entorno), para que se agregue de forma autom\u00e1tica y se pueda ocupar en la linea de comando (CMD) de Windows.</p>"},{"location":"01_Introducci%C3%B3n/#16-tipos-de-lenguajes-de-programacion","title":"1.6 Tipos de lenguajes de programaci\u00f3n","text":"<ul> <li>Lenguaje COMPILADO</li> <li>Lenguaje INTERPRETADO  JIT (Just In Time)</li> </ul>"},{"location":"01_Introducci%C3%B3n/#17-ventajas-de-python","title":"1.7 Ventajas de Python","text":"<ul> <li>Multiplaforma</li> <li>Open Source</li> <li>Corre en diferentes arquitecturas</li> <li>Es utilizado en Backend</li> <li> </li> </ul> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"01_Introducci%C3%B3n/#se-puede-programar-tarjetas-electronicas-y-microcontroladores","title":"Se puede programar tarjetas electr\u00f3nicas y microcontroladores","text":""},{"location":"02_Variables/","title":"2 Variables en Python","text":""},{"location":"02_Variables/#2-variables-en-python","title":"2. Variables en Python","text":"<p>Python es un lenguaje debilmente tipado, y sin declaraci\u00f3n de tipo, tan solo se declara la variable con un valor de inicializaci\u00f3n, es lo unico necesario. Es un lenguaje orientado a Objetos (POO).</p>"},{"location":"02_Variables/#21-buenas-practicas-para-declaracion-de-variables-en-python","title":"2.1 Buenas pr\u00e1cticas para declaraci\u00f3n de variables en Python","text":"<p>En Python las buenas practicas que se aplican a la declaraci\u00f3n de variables, son las siguientes:</p> <ul> <li>Se deben escribir en min\u00fasculas</li> <li>Solo puede contener n\u00fameros despu\u00e9s, de la primera letra con el que comienza el nombre de la variable que estamos declarando.<ul> <li>Ejemplo:<ul> <li><code>k5m</code></li> <li><code>variable1</code></li> <li><code>v2s</code></li> <li><code>variable_2</code></li> </ul> </li> </ul> </li> <li>Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada <code>variable1</code> y otra llamada <code>Variable1</code>, para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta.</li> <li>No pueden contener espacios entre letras o palabras</li> <li>No puede comenzar con n\u00fameros o s\u00edmbolos</li> <li>No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: !\"\u00b7$%&amp;\\/()=?\u00bf.</li> <li>El nombre debe ser descriptivo; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada</li> <li>(Regla especial): Todo de escribe en ingles.</li> <li>Si se desea escribir una variable combinando dos palabras o m\u00e1s, se separar\u00e1n con un gui\u00f3n bajo (_). Esta convenci\u00f3n se llama Snake Case (snake_case)<ul> <li>Ejemplos:<ul> <li><code>valor</code></li> <li><code>valor1</code></li> <li><code>valor_uno</code></li> <li><code>valor_1</code></li> </ul> </li> </ul> </li> <li>Siempre se debe inicializar la variable:<ul> <li>Ejemplo:<ul> <li><code>mi_variable = 10</code></li> <li><code>variable_2 = \"mensaje\"</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"02_Variables/#22-tipos-de-datos-en-python","title":"2.2 Tipos de datos en Python","text":"<p>Al ser un lenguaje dinamicamente tipado no es necesario indicar que tipo es variable, pero se deben conocer para la compatibilidad de tipos y c\u00f3mo podemos trabajar con ellos.</p> Tipo Descripci\u00f3n Ejemplo Int N\u00fameros enteros naturales <code>variable_int = 10</code> Float N\u00fameros con punto decimal <code>variable_flotante = 2.2</code> str Cadena de caracteres (String) <code>variable_str = \"texto\"</code> Bool Tipo booleano <code>variable_bool = True</code> Complex Tipo n\u00famero complejo <code>variable_complex = 3+5j</code> (Int) Hexadecimal N\u00famero hexadecimal <code>variable_hex = 0xa</code> (Int) Octal N\u00famero octal <code>variable_oct =  0o12</code> (Int) Binario N\u00famero binario <code>variable_bin = 0b1010</code>"},{"location":"02_Variables/#23-variables-tipo-enteras-int","title":"2.3 Variables tipo Enteras (int)","text":"<p>El tipo de variable m\u00e1s com\u00fan son las variables entereras, que son valores tanto negativos o positivos enteros. Practicamente no hay l\u00edmite con el valor que se puede asignar, siempre y cuando no tenga parte fracci\u00f3naria.</p> <p>Ejemplo:</p> <pre><code>variable = 10 # Inicializo con un valor de 10\n\nvariable_2 = 0 # Inicializo con un valor de 0\n\nvariable_3 = -5 # Inicializo con un valor de -5\n\nvalor_enorme = 5000000000000000000000000000000000000000000000000000000\n</code></pre> <pre><code>print(variable)\nprint(\"-----\")\nprint(variable_2)\nprint(\"-----\")\nprint(variable_3)\nprint(\"-----\")\nprint(valor_enorme)\n</code></pre> <pre><code>10\n-----\n0\n-----\n-5\n-----\n5000000000000000000000000000000000000000000000000000000\n</code></pre> <p>Dentro de la variables enteras tambien est\u00e1n comprendidas otro n\u00fameros con base diferente, siempre manejamos base decimal. En el ejemplo que se muestra asignaci\u00f3n de otros tipos de variables.</p> <pre><code>diez = 10               # Base diez, comprende de 0 a 9\n\ndiez_binario = 0b1010   # N\u00famero binario, comprende de 0 y 1\n\ndiez_octal = 0o12       # Base Octal, comprende de 0 a 7\n\ndiez_hex = 0x0a          # Base hexadecimal comprende de 0 a F\n</code></pre> <pre><code>print(diez)\nprint(\"-----\")\nprint(diez_binario)\nprint(\"-----\")\nprint(diez_octal)\nprint(\"-----\")\nprint(diez_hex)\n</code></pre> <pre><code>10\n-----\n10\n-----\n10\n-----\n10\n</code></pre>"},{"location":"02_Variables/#24-variables-tipo-flotantes-float","title":"2.4 Variables tipo Flotantes (float)","text":"<p>El tipo de variable flotante o punto flotante, que son valores tanto negativos o positivos con parte decimal. Practicamente no hay l\u00edmite con el valor que se puede asignar.</p> <p>Ejemplo:</p> <pre><code>variable = 5.6 # Inicializo con un valor de 5.6\n\nvariable_2 = 0.4 # Inicializo con un valor de 0.4\n\nvariable_3 = -5.4 # Inicializo con un valor de -5.4\n\nvariable_4 = 0.000000000000000005616516851654864651\n</code></pre> <pre><code>print(variable)\nprint(\"-----\")\nprint(variable_2)\nprint(\"-----\")\nprint(variable_3)\nprint(\"-----\")\nprint(variable_4)\nprint(\"-----\")\n</code></pre> <pre><code>5.6\n-----\n0.4\n-----\n-5.4\n-----\n5.616516851654865e-18\n-----\n</code></pre>"},{"location":"02_Variables/#24-variables-tipo-str-string-o-cadena-de-caracteres","title":"2.4 Variables tipo str (String) o Cadena de caracteres","text":"<p>Otro tipo de dato utilizado es el tipo de dato String, abreviado <code>str</code>. Hay varias formas para crear este tipo de dato, se debe escribir entre doble comilla <code>\"\"</code>, entre doble comilla simple <code>''</code>, entre tripe comilla simple <code>''' '''</code>, entre triple doble comilla <code>\"\"\" \"\"\"</code></p> <pre><code>cadena_1 = 'This is a string in Python' # string in single quotes\ncadena_2 = \"This is a string in Python\" # string in double quotes\ncadena_3 = '''This is a string in Python''' # string in triple quotes\ncadena_4 = \"\"\"This is a string in Python\"\"\" # string in triple double-quotes\n</code></pre> <pre><code>print(cadena_1)\nprint(\"----------------\")\nprint(cadena_2)\nprint(\"----------------\")\nprint(cadena_3)\nprint(\"----------------\")\nprint(cadena_4)\n</code></pre> <pre><code>This is a string in Python\n----------------\nThis is a string in Python\n----------------\nThis is a string in Python\n----------------\nThis is a string in Python\n</code></pre> <p>En concreto entre doble comilla y comilla simple no hay diferencias pero con lo que respecta a triple comilla simple y triple comilla doble, se conoce como multilinea.</p> <pre><code>str1='''This is\nthe first\nMulti-line string.\n'''\nprint(str1)\n\nstr2=\"\"\"This is\nthe second\nMulti-line\nstring.\"\"\"\nprint(str2)\n</code></pre> <pre><code>This is\nthe first\nMulti-line string.\n\nThis is\nthe second\nMulti-line\nstring.\n</code></pre> <p>No se pueden mezclar entre doble comilla y simple comilla, y tienen efectos similares, es decir, si necesitamos mostrar un texto con comillas simples o doble comilla, se realiza de la siguiente manera.</p> <pre><code>str1='Estamos aprendiendo \"Python\" paso a paso'\nprint(str1)\n\nstr2=\"Estamos aprendiendo 'Python' paso a paso\"\nprint(str2)\n</code></pre> <pre><code>Estamos aprendiendo \"Python\" paso a paso\nEstamos aprendiendo 'Python' paso a paso\n</code></pre>"},{"location":"02_Variables/#25-variables-tipo-booleana-bool","title":"2.5 Variables tipo Booleana (bool)","text":"<p>El tipo de dato booleano solo tiene dos tipos de valores: - <code>True</code> - <code>False</code></p> <p>Creamos unas variables y asignamos valores tipo booleanos.</p> <p>Ejemplo:</p> <pre><code>valor_verdadero = True\n\nvalor_falso = False\n\nprint(valor_verdadero)\nprint('----------')\nprint(valor_falso)\n</code></pre> <pre><code>True\n----------\nFalse\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"03_Concatenacion_de_Strings/","title":"3 Concatenaci\u00f3n de Strings","text":""},{"location":"03_Concatenacion_de_Strings/#3-concatenacion-de-strings","title":"3. Concatenaci\u00f3n de Strings","text":"<p>La concatenaci\u00f3n es el poder agrupar, juntar, unir, fusionar, pegar cadenas de caracteres, es decir, \"sumar\" varios string para formar uno solo.</p> <p>La concatenaci\u00f3n es realiza con el s\u00edmbolo del signo m\u00e1s <code>+</code>.</p>"},{"location":"03_Concatenacion_de_Strings/#31-concatenando-con","title":"3.1 Concatenando con <code>+</code>","text":"<p>Tenemos variables tipo <code>str</code> en donde guardamos texto.</p> <p>Ejemplo</p> <pre><code>frase = \"Lo mejor del mundo\"\nnombre = \"es saber programaci\u00f3n\"\n\nfrase_completa = frase + nombre\n\nprint(frase + nombre)\nprint(frase_completa)\n</code></pre> <pre><code>Lo mejor del mundos saber programaci\u00f3n\nLo mejor del mundos saber programaci\u00f3n\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#32-funcion-str","title":"3.2 Funci\u00f3n <code>str()</code>","text":"<p>En la concatenaci\u00f3n b\u00e1sica solo se pueden concatenar tipos <code>str</code>, por lo tanto, si necesitamos hacer un paso previo para que el tipo de dato que no sea <code>str</code> se convierta a este tipo. Para ello contamos con funci\u00f3n <code>str()</code> la cual realiza ese trabajo.</p> <p>La sintaxis es:</p> <p><pre><code>str(object, encoding=encoding, errors=errors)\n</code></pre> Par\u00e1metros:</p> <ul> <li><code>object   Cualquier tipo de objeto</code></li> <li><code>encoding El encoding del objeto. Por default es UTF-8</code></li> <li><code>errors   Especifica que si hay un error en el encoding, que debe hacer</code></li> <li><code>return: Regresa el dato en tipo str : (str)</code></li> </ul> <p>Entonces, si tenemos un tipo <code>int</code>, <code>float</code> o <code>boolean</code> primero debemos convertirlos a tipo <code>str</code>.</p> <p>Ejemplo:</p> <pre><code>frase = \"Mi edad es: \"\nedad = 25\nedad_str = str(25)\n\nprint(frase + edad)\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#33-concatenando-otros-tipos-de-datos","title":"3.3 Concatenando otros tipos de datos.","text":"<p>Si queremos hacer una concatenaci\u00f3n directa entre un tipo <code>str</code> y otro tipo de dato, nos saldr\u00e1 un error de tipo, indicando que no se puede concatenar <code>str</code> con alguno otro tipo. Como se muestra a continuaci\u00f3n:</p> <pre><code>print(\"Mi edad es: \" + 25)\n</code></pre> <pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n/tmp/ipykernel_24287/3532323227.py in &lt;module&gt;\n----&gt; 1 print(\"Mi edad es: \" + 25)\n\n\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> <p>Por lo tanto, debemos hacer esa conversi\u00f3n previa a la concatenaci\u00f3n. Existen dos formas, tomamos el valor, realizamos la conversi\u00f3n y se guarda en otra variable o la forma directa.</p> <p>Ejemplo:</p> <pre><code>#Por partes\nfrase = \"Mi edad es: \"\nedad = 25\nedad_str = str(25)\n\nprint(frase + edad_str)\nprint(\"Mi edad es: \" + edad_str)\n</code></pre> <pre><code>Mi edad es: 25\nMi edad es: 25\n</code></pre> <p>Vamos a realizar una combinaci\u00f3n b\u00e1sica entre los tipos de datos b\u00e1sicos</p> <pre><code># Declaro las variables\nedad = 25\naltura = 1.68\nnombre = \"Alejandro\"\ncasado = False\n\n#Las convierto a tipo str\n\nedad_str = str(edad)\naltura_str = str(altura)\ncasado_str = str(casado)\n\nprint(\"Mi nombre es \" + nombre + \", mi edad es de \" + edad_str + \" anios,\" + \"tengo una altura de \" +\n      altura_str + \" mi estado de casado es: \" + casado_str )\n\nprint(\"Mi nombre es \" + nombre + \", mi edad es de \" + str(edad) + \" anios,\" + \"tengo una altura de \" +\n      str(altura) + \" mi estado de casado es: \" + str(casado))\n</code></pre> <pre><code>Mi nombre es Alejandro, mi edad es de 25 anios,tengo una altura de 1.68 mi estado de casado es: False\nMi nombre es Alejandro, mi edad es de 25 anios,tengo una altura de 1.68 mi estado de casado es: False\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#34-secuencias-de-espace","title":"3.4 Secuencias de espace","text":"<p>Las secuencias de espace son caracteres especiales para darle formato a las cadenas de texto (Strings).</p> Nombre Simbolo Secuencia de escape Backslash \\ <code>\\\\</code> Comilla simple \\' <code>\\'</code> Comilla doble \\\" <code>\\\"</code> Bell (sonido) <code>\\a</code> Retroceso <code>\\b</code> Nueva l\u00ednea (enter) <code>\\n</code> Carriage return \\r <code>\\r</code> Tab horizontal tab <code>\\t</code> Tab vertical tab vertical <code>\\v</code>"},{"location":"03_Concatenacion_de_Strings/#salto-de-linea-n","title":"Salto de l\u00ednea <code>\\n</code>","text":"<p>Cuando queremos que el texto tenga un salto de l\u00ednea (enter), tenemos la secuencia <code>\\n</code>.</p> <pre><code>mensaje = \"Hola\\nTexto en siguiente linea\\nla siguiente linea\"\n\nprint(mensaje )\n</code></pre> <pre><code>Hola\n Texto en siguiente linea\nla siguiente linea\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#tabulacion","title":"Tabulaci\u00f3n","text":"<p>En ocasiones queremos tabular (sangr\u00eda) nuestro texto para darle un acomodo se aplica <code>\\t</code></p> <pre><code>mensaje = \"Columa 1\\tColumna2\\tColumna 3\\nColuma 1\\tColumna2\\tColumna 3\"\nprint(mensaje)\n</code></pre> <pre><code>Columa 1    Columna2    Columna 3\nColuma 1    Columna2    Columna 3\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#comillas","title":"Comillas","text":"<p>En python nos da una ventaja con respecto al uso de comillas simples y dobles por default. Recordando que se pueden escribir Strings <code>str</code> con <code>\"</code> y <code>'</code>. Pero vamos a ver la diferencia si queremos utilizar las comillas ya sean simple o doble dentro del mensaje que queremos transmitir; al igual la equivalencia de las secuencias de escape <code>\\'</code> y <code>\\\"</code>.</p> <pre><code># Si que queremos usar las comillas simples en un string sin utilizar la secuencia de escape, debemos usar\n# la comilla doble para generar dicho string\n\nmensajeDobleComilla = \"hola 'este texto esta en comilla simple' , texto fuera de la comilla\"\nmensajeComillaSimple = 'hola \\'este texto esta en comilla simple\\' , texto fuera de la comilla '\n\nprint(mensajeDobleComilla)\nprint(mensajeComillaSimple)\n</code></pre> <pre><code>hola 'este texto esta en comilla simple' , texto fuera de la comilla\nhola 'este texto esta en comilla simple' , texto fuera de la comilla\n</code></pre> <pre><code># Si que queremos usar doble comilla en un string sin utilizar la secuencia de escape, debemos usar\n# la comilla simple para generar dicho string\n\nmensajeComillaSimple = 'hola \"este texto esta en doble comilla\" texto fuera de la comilla '\nmensajeDobleComilla = \"hola \\\"este texto esta en comilla simple\\\", texto fuera de la comilla\"\n\nprint(mensajeDobleComilla)\nprint(mensajeComillaSimple)\n</code></pre> <pre><code>hola \"este texto esta en comilla simple\", texto fuera de la comilla\nhola \"este texto esta en doble comilla\" texto fuera de la comilla\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#back-slash","title":"Back Slash","text":"<p>En ocasiones necesitamos utilizar la diagonal (slash) en un texto, para esto existe la secuencia de escape slasj doble <code>\\\\</code>.</p> <pre><code># Utilizando slash en un texto, por ejemplo para rutas dentro de un string\n\nmensaje = 'ruta\\\\carperta1\\\\carperta2\\\\archivo'\n\nprint(mensaje)\n</code></pre> <pre><code>ruta\\carperta1\\carperta2\\archivo\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#35-formateo-de-strings-funcion-format","title":"3.5 Formateo de Strings - funci\u00f3n <code>format()</code>","text":"<p>Los <code>str</code> tienen una propiedad llamada <code>format()</code> con la cual podemos concatenar variables, se tienen en varias formas para realizar la concatenacion con este metodo. Retorna el <code>str</code> con el formato indicado. Las variables se colocaran automaticamente en la llaves.</p> <p>Sintaxis:</p> <pre><code>'string {} ... {} ... '.format(variable1, variable2,...)\n\n'string {0} ... {1} ... '.format(variable1, variable2,...)\n\n'string {variable1} ... {variable2} ... '.format(variable1 =\"hola\", variable2=5,...)\n</code></pre> <pre><code># La forma que es por default sin indicar nada, en el orden que los pasamos, seran asignados\nnombre = \"Alejandro\"\nedad = 30\n\ntexto_default = \"Mi nombre es {} y tengo {} anios de edad\".format(nombre, edad)\n\nprint(texto_default)\n</code></pre> <pre><code>Mi nombre es Alejandro y tengo 30 anios de edad\n</code></pre> <pre><code># Formato indicando la varible en las llaves, esto sirve para cambiar el orden\n\ncolor = \"Rojo\"\nnumero = 3\n\ntexto = \"El numero '{1}' corresponde al color '{0}'\".format(color, numero)\n\nprint(texto)\n</code></pre> <pre><code>El numero '3' corresponde al color 'Rojo'\n</code></pre> <pre><code># Indicando el nombre de la variable\n\ntexto_variables = \"Mi nombre es {nombre} tengo {edad} anios\".format(nombre=\"Alejandro\", edad=25)\n\nprint(texto_variables)\n</code></pre> <pre><code>Mi nombre es Alejandro tengo 25 anios\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#351-formato-para-numeros-y-la-precision","title":"3.5.1 Formato para n\u00fameros y la precision","text":"<p>En muchas ocasiones queremos imprimir un valor numerico pero con cierta cantidad decimales, con la funci\u00f3n <code>format()</code> nos da un formato para especificar como queremos la salida.</p> <p>Debemos marcar una sintaxis especial que sigue el siguiente formato, principalmente es para valores flotantes:</p> <p>Sintaxis:</p> <pre><code>[index]:[width][.precision][type]\n</code></pre> <p>Tipos:</p> <ul> <li><code>d</code> para enteros</li> <li><code>f</code> para flotantes</li> <li><code>b</code> para n\u00fameros binarios</li> <li><code>o</code> para n\u00fameros octal</li> <li><code>x</code> para n\u00fameros hexadecimal</li> <li><code>s</code> para strings</li> <li><code>e</code> para flotante en formato exponente</li> </ul> <p>Aplicado:</p> <pre><code>\"El precio es {0:1.2f}\".format(25.365894) #es la primera posicion [0]\n</code></pre> <pre><code>#es la primera posicion [0], parte entera como minimo un valor, con 2 decimales y tomarlo como tipo flotante\nnumero = 561.265264161\nvalor1 = \"El precio es {0:1.2f}\".format(numero)\n\n# los valores enteros no es necesario indicar la parte decimal, solo se indica la posicion\nvalor2 = \"La calificacion final es {0:.2f} de {1} parciales\".format(8.369,3)\n\nprint(valor1)\nprint(valor2)\n</code></pre> <pre><code>El precio es 561.27\nLa calificacion final es 8.37 de 3 parciales\n</code></pre> <pre><code>valor1 = float(input('Dar valor 1: '))\nvalor2 = float(input('Dar valor 2: '))\n\nsuma = valor1 + valor2\n\nprint('El resultado es {0:1.3f}'.format(suma))\n</code></pre> <pre><code># Dar formato con decimales de forma dinamica\nvalor = float(input('Dar un valor para redondear: '))\nredondeo = int(input('A cuantos decimales?: '))\n\nr = '0:1.{}f'.format(redondeo)\nmsg = 'El valor redondeado a {1} decimales es: {' + r + '}'\n\nprint(msg)\nprint(msg.format(valor, redondeo))\n</code></pre> <pre><code>nombre = \"Alejandro\"\n\nprint(\"Mi nombre es {0:s}\".format(nombre))\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#36-fstring","title":"3.6 <code>f'String'</code>","text":"<p>Actualmente se tiene una nueva forma para crear strings de forma mas sencilla y dar formato.</p> <p>Esta es la forma mas actual que se usa.</p> <p>Sintaxis:</p> <pre><code>cantidad = 5\ncolor = \"verde\"\n\nf'El numero de autos es {cantidad} y todos son color {color}'\nf\"El numero de autos es {cantidad} y todos son color {color}\"\n</code></pre> <pre><code>cantidad = 5\ncolor = \"tutifruti\"\n\nmensaje1 = f'El numero de autos es {cantidad} y todos son color {color}'\nmensaje2 = f\"El numero de autos es \\\"{cantidad}\\\" y todos son color \\\"{color}\\\"\"\n\nprint(mensaje1)\nprint(mensaje2)\n</code></pre> <pre><code>El numero de autos es 5 y todos son color tutifruti\nEl numero de autos es \"5\" y todos son color \"tutifruti\"\n</code></pre>"},{"location":"03_Concatenacion_de_Strings/#361-formato-a-numeros-con-fstring","title":"3.6.1 Formato a n\u00fameros con <code>f'string'</code>","text":"<p>Sintaxis:</p> <pre><code>{variable:{width}.{decimal-1}}\n</code></pre> <p>Aplicacion:</p> <pre><code>num = 3.141592\n\nprint(f\"El valor de pi es: {num:{1}.{3}}\")\n</code></pre> <pre><code># Es similar a la funci\u00f3n format(), con respecto a la sintaxis, no es necesario indicar la posicion de la variable\n# los decimales es el valor menos 1\n\nnum = 3.14159\ntexto_formateado = f\"El valor de pi es: {num:{1}.{3}}\" # queremos 2 decimales\nprint(texto_formateado)\n</code></pre> <pre><code>El valor de pi es: 3.14\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"04_Operadores_aritm%C3%A9ticos/","title":"4 Operadores aritm\u00e9ticos","text":""},{"location":"04_Operadores_aritm%C3%A9ticos/#4-operadores-aritmeticos","title":"4. Operadores aritm\u00e9ticos","text":"<p>En Python contamos con varios operadores aritm\u00e9ticos.</p> Nombre S\u00edmbolo Ejemplo Suma + 4 + 2 Resta - 4 - 5 Negaci\u00f3n - -2 Multiplicaci\u00f3n * 6 * 8 Divisi\u00f3n / 1 / 2 Divisi\u00f3n entera // 5 // 3 Exponente ** 4**2 M\u00f3dulo % 5 % 2 <pre><code>print(\"Suma\")\nprint( 4 + 2)\nprint(\"-------\")\nprint(\"Resta\")\nprint( 4 - 2)\nprint(\"-------\")\nprint(\"Negaci\u00f3n\")\na = 2\nprint( -a) # -1 * a\nprint(\"-------\")\nprint(\"Multiplicaci\u00f3n\")\nprint( 4 * 2)\nprint(\"-------\")\nprint(\"Divisi\u00f3n\")\nprint( 1/2)\nprint(\"-------\")\nprint(\"Divisi\u00f3n entera\")\nprint( 10//3)\nprint(\"-------\")\nprint(\"Exponente\")\nprint( 3**2) # 3^2\nprint(\"-------\")\nprint(\"M\u00f3dulo o Residuo\")\nprint(10 % 3) # 10%3 = 1\n</code></pre> <pre><code>Suma\n6\n-------\nResta\n2\n-------\nNegaci\u00f3n\n-2\n-------\nMultiplicaci\u00f3n\n8\n-------\nDivisi\u00f3n\n0.5\n-------\nDivisi\u00f3n entera\n3\n-------\nExponente\n9\n-------\nM\u00f3dulo o Residuo\n1\n</code></pre>"},{"location":"04_Operadores_aritm%C3%A9ticos/#41-precedencia-de-operadores","title":"4.1 Precedencia de operadores","text":"<p>El orden de precedencia de ejecuci\u00f3n de los operadores aritm\u00e9ticos es:</p> Orden Operador 0. Agrupaci\u00f3n ( ) 1. Exponente ** 2. Negaci\u00f3n - 3. Multiplicaci\u00f3n, Divisi\u00f3n, Divisi\u00f3n entera, M\u00f3dulo *, /, //, % 4. Suma, Resta +, -"},{"location":"04_Operadores_aritm%C3%A9ticos/#ejemplos","title":"Ejemplos:","text":"<p>Convertir la expresion algebraica a una espresion computable</p> <ol> <li>\\(\\frac{2-3}{20}\\)</li> <li>\\(3 \\times \\frac{1}{2} + 8\\)</li> <li>\\(3^2 + 6^3 - \\frac{5}{10}\\)</li> <li>\\(\\frac{5 + 6 \\times 9}{6 \\times 1} + 3 - \\frac{8}{2}\\)</li> <li>\\(\\frac{6+8}{2*3-5}\\)</li> </ol> <pre><code>caso_1 = (2-3) / 20\ncaso_2 = 3 * (1/2) + 8\ncaso_3 = (3**2) + (6**3) - (5/10)\ncaso_4 = ((5+(6*9)) / (6*1)) + 3 - (8/2)\ncaso_5 = (6+8)/((2 * 3)- 5)\n\nprint(\"Resultado caso 1: \" + str(caso_1) )\nprint(\"Resultado caso 2: \" + str(caso_2) )\nprint(\"Resultado caso 3: \" + str(caso_3) )\nprint(\"Resultado caso 4: \" + str(caso_4) )\nprint(\"Resultado caso 5: \" + str(caso_5) )\n</code></pre> <pre><code>Resultado caso 1: -0.05\nResultado caso 2: 9.5\nResultado caso 3: 224.5\nResultado caso 4: 8.833333333333334\nResultado caso 5: 14.0\n</code></pre>"},{"location":"04_Operadores_aritm%C3%A9ticos/#ejercicios","title":"Ejercicios","text":"<p>Guardar en una variable el resultado de la operacion e imprimir por consola el resultado de las siguientes operaciones:</p> <ol> <li>\\(\\frac{5 + 8}{2}\\)</li> <li>\\(\\frac{5 }{2} + 3\\)</li> <li>\\(5 + \\frac{1}{2} \\times 6\\)</li> <li>\\(5^2\\)</li> <li>\\(3 + \\frac{1}{2} \\times \\frac{5}{-2}\\)</li> </ol>"},{"location":"04_Operadores_aritm%C3%A9ticos/#242-aplicaciones","title":"2.4.2 Aplicaciones","text":"<p>Vamos resolver unos problemas basicos</p> <ol> <li>Realizar una calculadora que sume 2 n\u00fameros, los valores estan en el programa</li> <li>Realizar una calculadora que haga la divisi\u00f3n de 2 n\u00fameros, los valores estan en el programa</li> <li>Realizar el c\u00e1lculo de voltaje, los valores estan en el programa</li> </ol> <pre><code># 1. Realizar una calculadora que sume 2 n\u00fameros que esten en el programa\n\nvalor_1 = 15\nvalor_2 = 269\n\nsuma = valor_1 + valor_2\n\nprint(\"La suma de \" + str(valor_1) + \" con \" + str(valor_2) + \" es: \"\n      + str(suma))\n</code></pre> <pre><code>La suma de 15 con 269 es: 284\n</code></pre> <pre><code># 2. Realizar una calculadora que haga la divisi\u00f3n de 2 n\u00fameros, los valores estan en el programa\nvalor_1 = 5\nvalor_2 = 20\n\ndivision = valor_1 / valor_2\n\nprint(\"La division de \" + str(valor_1) + \" entre \" + str(valor_2) +\n      \" es: \" + str(division))\n</code></pre> <pre><code>La division de 5 entre 20 es: 0.25\n</code></pre> <pre><code># 3. Realizar el c\u00e1lculo de voltaje, los valores estan en el programa\ncorriente = 0.01 # 10mA\nresistencia = 1000 #1k\n\nvoltaje = corriente * resistencia\n\nprint(\"La corriente es \" + str(corriente) + \"A, la resistencia es: \" + str(resistencia)\n      + \" Ohms, el voltaje es: \" + str(voltaje) + \"V\")\n</code></pre> <pre><code>La corriente es 0.01A, la resistencia es: 1000 Ohms, el voltaje es: 10.0V\n</code></pre>"},{"location":"04_Operadores_aritm%C3%A9ticos/#2421-ejercicios","title":"2.4.2.1 Ejercicios","text":"<ul> <li>Segunda Ley, calcular fuerza con datos guardados. Formula \\(F = m * a\\)</li> <li>Hacer la operacion de 5 resistencias en serie, dar resistencia total</li> <li>Hacer el calculo de 5 resistencias en paralelo, dar resistencia total</li> </ul> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"05_ingresando_dato_y_como_convertirlos/","title":"05 ingresando dato y como convertirlos","text":""},{"location":"05_ingresando_dato_y_como_convertirlos/#25-ingresando-dato-y-como-convertirlos","title":"2.5 Ingresando dato y c\u00f3mo convertirlos","text":""},{"location":"05_ingresando_dato_y_como_convertirlos/#251-funcion-input","title":"2.5.1 Funci\u00f3n <code>input()</code>","text":"<p>La funci\u00f3n input sirve para leer datos desde teclado en la terminal.</p> <p>Sintaxis:</p> <pre><code>input(prompt)\n</code></pre> <p>Parametros:</p> <ul> <li><code>prompt (opcional): Es un string que se puede colocar para que aparezca antes del ingreso de datos</code></li> <li><code>return: Regresa el texto que ingresen desde terminal : (str)</code></li> </ul> <p>Ejemplo:</p> <p>Cuando queremos recibir datos del usuario debemos guardarla en una variable para posteriormente utilizarla. Recordemos que nos regresara esa informaci\u00f3n en tipo <code>str</code>.</p> <pre><code>datos = input()\n</code></pre> <pre><code>print('Ingreso de datos')\ndatos = input()\n\nprint('impresion de datos')\nprint(datos)\n</code></pre> <pre><code>Ingreso de datos\nHola\nimpresion de datos\nHola\n</code></pre> <p>Ahora si queremos que el usuario vea un mensaje y a continuaci\u00f3n coloque los datos, debemos pasarle el valor para el argumento <code>prompt</code> entre los par\u00e9ntesis.</p> <pre><code>edad = input(\"Dar la edad\")\n</code></pre> <pre><code>edad = input(\"Dar edad: \")# devuelve un str\n\nprint(\"Tu edad es: \" + edad)\n</code></pre> <pre><code>Dar edad: 50\nTu edad es: 50\n</code></pre>"},{"location":"05_ingresando_dato_y_como_convertirlos/#552-funcion-int","title":"5.5.2 Funci\u00f3n <code>int()</code>","text":"<p>En muchas ocasiones puedes tener un <code>n\u00famero entero</code> almacenado en una variable pero no exactamnete es tipo <code>n\u00famero</code>. Entonces, en ese caso necesitamos que sea de tipo <code>int</code> para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n <code>int()</code></p> <p>Sintaxis:</p> <pre><code>int(value, base)\n</code></pre> <p>Parametros:</p> <ul> <li><code>value: Un n\u00famero o un string que puede ser convertido a n\u00famero entero</code></li> <li><code>base (opcional) : El formato con el que representa el n\u00famero. Default value: 10</code><ul> <li><code>base: 10 -&gt; decimal (Valor por default)</code></li> <li><code>base: 2 -&gt; binario</code></li> <li><code>base: 16 -&gt; hexadecimal</code></li> </ul> </li> <li><code>return: el valor en tipo int (decimal por default)</code></li> </ul> <pre><code>decimal = int(\"100\")       # el valor es decimal, por default lo toma as\u00ed\nbinario = int(\"1010\", 2)   # el valor que pasamos esta en binario\nhexadecimal = int(\"FF\",16) #el valor que pasamos esta en hexadecimal\n\nprint(decimal)\nprint(binario)\nprint(hexadecimal)\n</code></pre> <pre><code>100\n10\n255\n</code></pre>"},{"location":"05_ingresando_dato_y_como_convertirlos/#553-funcion-float","title":"5.5.3 Funci\u00f3n <code>float()</code>","text":"<p>En muchas ocasiones puedes tener un <code>n\u00famero de punto flotante</code> almacenado en una variable pero no exactamnete es tipo <code>n\u00famero</code>. Entonces, en ese caso necesitamos que sea de tipo <code>float</code> para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n <code>float()</code></p> <p>Sintaxis:</p> <pre><code>float(value)\n</code></pre> <p>Parametros:</p> <ul> <li><code>value: Un n\u00famero o string que puede ser convertido en tipo n\u00famero float</code></li> <li><code>return: Regresa un tipo float</code></li> </ul> <pre><code>altura = float(\"1.680000\")\nvalor = float(\"4.3\")\nun_medio = float(\".5\")\n\nprint(altura)\nprint(valor)\nprint(un_medio)\n</code></pre> <pre><code>1.68\n4.3\n0.5\n</code></pre>"},{"location":"05_ingresando_dato_y_como_convertirlos/#554-funcion-bool","title":"5.5.4 Funci\u00f3n <code>bool()</code>","text":"<p>En muchas ocasiones puedes tener <code>una expresion booleana</code> almacenado en una variable pero no exactamnete es tipo <code>booleano</code>. Entonces, en ese caso necesitamos que sea de tipo <code>boolean</code> para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n <code>bool()</code></p> <p>Sintaxis:</p> <pre><code>bool(object)\n</code></pre> <p>Parametros:</p> <ul> <li><code>object: Cualquier objet, string, lista, numero, etc.</code></li> <li><code>return: Regresa un tipo boolean</code></li> </ul> <p>La funci\u00f3n siempre regresa <code>True</code>, a menos que:</p> <ul> <li>El objetos est\u00e9 vac\u00edo, como <code>[]</code>, <code>()</code>, <code>{}</code></li> <li>El objeto es <code>False</code></li> <li>El objeto es <code>0</code></li> <li>El objeto es <code>None</code></li> <li>Cadena vacia <code>\"\"</code></li> </ul> <p>En todos estos casos, retorna <code>False</code></p> <pre><code>uno = bool(1)\ncero = bool(0)\nfalso = bool(False)\nverdadero = bool(True)\ntexto = bool(\"hola\")\ntexto_vacio = bool(\"\")\n\nprint(uno)\nprint(cero)\nprint(falso)\nprint(verdadero)\nprint(texto)\nprint(texto_vacio)\n</code></pre> <pre><code>True\nFalse\nFalse\nTrue\nTrue\nFalse\n</code></pre>"},{"location":"05_ingresando_dato_y_como_convertirlos/#aplicaciones","title":"Aplicaciones","text":"<p>1. Pedir dos n\u00fameros e imprimir el resultado</p> <pre><code>print(\"Mi super calculador de 2 n\u00fameros\")\nvalor1 = int(input(\"Dar el valor 1: \"))\nvalor2 = int(input(\"Dar el valor 2: \"))\n\nsuma = valor1 + valor2\n\nprint(\"El resultado es: \" + str(suma))\n</code></pre> <pre><code>Mi super calculador de 2 n\u00fameros\nDar el valor 1: 5\nDar el valor 2: 6\nEl resultado es: 11\n</code></pre> <p>2. Calculadora de Segunda Ley</p> <pre><code># F = m * a\nprint(\"Calculadora de Segunda Ley - Fuerza\")\nmasa = float( input(\"Dar el valor de la masa (kg):\" ) )\naceleracion = float( input(\"Dar el valor de la aceleracion (m/s^2):\"  )  )\n\nfuerza =  masa * aceleracion\n\nprint(\"la fuerza es: \" + str(fuerza)+ \"N\")\n</code></pre> <pre><code>Calculadora de Segunda Ley - Fuerza\nDar el valor de la masa (kg):25\nDar el valor de la aceleracion (m/s^2):36\nla fuerza es: 900.0N\n</code></pre> <p>3. Programa que calcule las resistencias en serie, el usuario debe ingresar 3 resistencias</p> <pre><code>print(\"Dar tres resistencias para obtener su valor en serie\")\nprint(\"Dar valores en ohms\")\nresistencia1 = float( input(\"Valor de resistencia 1: \")  )\nresistencia2 = float( input(\"Valor de resistencia 2: \")  )\nresistencia3 = float( input(\"Valor de resistencia 3: \")  )\n\nresitencia_total = resistencia1 + resistencia2 + resistencia\n\nprint(\"El valor total en serie es \" + str(resitencia_total) + \" ohms\")\n</code></pre>"},{"location":"05_ingresando_dato_y_como_convertirlos/#ejercicios","title":"Ejercicios","text":"<ol> <li>Hacer un programa que calcule el area y el perimetro del circulo, pidiendo los datos al usuario</li> <li>Hacer un programa que calcule 3 resistencias en paralelo, solicitando la informacion al usuario</li> </ol> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"06_Estructura_decision/","title":"06 Estructura decision","text":""},{"location":"06_Estructura_decision/#26-decisiones-if-if-else-elif","title":"2.6 Decisiones  <code>if</code> <code>if-else</code> <code>elif</code>","text":""},{"location":"06_Estructura_decision/#261-que-es-una-estructura-de-decision","title":"2.6.1 \u00bfQu\u00e9 es una estructura de decisi\u00f3n?","text":"<p>Dentro de la programaci\u00f3n tenemos una estructura que nos ayuda a poder tomar decisiones con base a una comparaci\u00f3n y de esta manera poder tomar un camino o tomar otro. Es una sentencias <code>IF</code>s la cual no ayuda a tomar la ruta que necesitemos</p>"},{"location":"06_Estructura_decision/#262-estructura-if","title":"2.6.2 Estructura <code>if</code>","text":"<p>Python la \u00fanica referencia que ocupa es la identaci\u00f3n, sean <code>espacios</code> o <code>tabs</code> y dos puntos <code>:</code> para indicar que comienza un bloque nuevo, en este caso una sentencia <code>if</code>.</p> <pre><code>if comparacion_verdadera :\n    c\u00f3digo que ejecuta si es verdadero\n    m\u00e1s c\u00f3digo\n    ...\n</code></pre>"},{"location":"06_Estructura_decision/#263-operadores-de-comparacion","title":"2.6.3 Operadores de comparaci\u00f3n","text":"Nombre S\u00edmbolo Ejemplo Mayor que <code>&gt;</code> <code>7 &gt; 5 -&gt; True</code> Mayor o igual que <code>&gt;=</code> <code>8 &gt;= 6 -&gt; False</code> Menor que <code>&lt;</code> <code>9 &lt; 10  -&gt; Falso</code> Menor o igual que <code>&lt;=</code> <code>5 &lt;= 5 -&gt; True</code> Igual que <code>==</code> <code>4 == 2 -&gt; False</code> Diferente de <code>!=</code> <code>9 != 9 -&gt; False</code> <p>Nota: No puede existir espacio en el s\u00edmbolo</p>"},{"location":"06_Estructura_decision/#264-aplicando-la-estructura-if","title":"2.6.4 Aplicando la estructura <code>if</code>","text":"<p>Vamos a realizar el primer ejemplo:</p> <p>1. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad</p> <p>Debemos comparar la edad para saber si es mayor o no, primero verificamos si es mayor de edad, en caso de que no sea as\u00ed, el programa sigue y pregunta si es menor de edad, en caso de que sea verdadero, entra y da el mensaje correspondiente.</p> <pre><code>edad = 19 #Declaramos una variable donde guardaremos la edad y asignamos el valor de 18\n\nif edad &gt;= 18:  # recordemos que se hace una comparacion y despues los dos puntos (:)\n    print(\"Es mayor de edad\")   #Recordemos que se debe aplicar una identacion\n\nif edad &lt; 18:    # recordemos que se hace una comparacion y despues los dos puntos (:)\n    print(\"Es menor de edad\") #Recordemos que se debe aplicar una identacion\n\nprint(\"fin del programa\")\n</code></pre> <pre><code>Es mayor de edad\nfin del programa\n</code></pre> <p>2. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad, la edad debe ser ingreasada desde terminal</p> <p>Debemos primero perdir la edad, una vez guardada debemos comparar la edad para saber si es mayor o no, primero verificamos si es mayor de edad, en caso de que no sea as\u00ed, el programa sigue y pregunta si es menor de edad, en caso de que sea verdadero, entra y da el mensaje correspondiente.</p> <pre><code>edad = input(\"Dar edad: \") #Pedimos el dato al usuario, este dato es tipo str\nedad_int = int(edad)       #la edad esta en tipo str, lo convertimos a int para poder realizar la comparaci\u00f3n\n\nif edad_int &gt;= 18:  # recordemos que se hace una comparacion y despues los dos puntos (:)\n    print(\"Eres mayor de edad\")   #Recordemos que se debe aplicar una identacion\n\nif edad_int &lt; 18:    # recordemos que se hace una comparacion y despues los dos puntos (:)\n    print(\"Eres menor de edad\") #Recordemos que se debe aplicar una identacion\n</code></pre> <pre><code>Dar edad: 20\nEres mayor de edad\n</code></pre>"},{"location":"06_Estructura_decision/#265-estructura-if-else","title":"2.6.5 Estructura <code>if-else</code>","text":"<p>En ocasiones necesitamos que nuestro programa tome una de las 2 rutas posibles, pero aqu\u00ed en caso que no se cumpla la comparaci\u00f3n entra al otro bloque si o si. Esta estructura es un <code>if-else</code>, si se cumple la condici\u00f3n, realizo la acci\u00f3n, de lo contrario hago otra</p> <pre><code>if comparacion_verdadera :\n    c\u00f3digo que ejecuta si es verdadero\n    m\u00e1s c\u00f3digo\n    ...\nelse:\n    de lo contrario se ejecuto este c\u00f3digo\n    m\u00e1s c\u00f3digo\n    ...\n</code></pre> <p>Vamos a realizar el primer ejemplo:</p> <p>3. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad</p> <p>Volveremos a realizar el mismo ejemplo, pero si nos damos cuenta en este ejercicio, si no es el primer caso debe ser el segundo, no tenemos otro ruta o alguna otra decisi\u00f3n.</p> <pre><code>edad = int(input(\"Dar la edad: \")) # Tomamos el dato y directamente la conversion de str a int\n\nif edad &gt;= 18:  # recordemos que se hace una comparacion y despues los dos puntos (:)\n    print(\"Es mayor de edad\")   #Recordemos que se debe aplicar una identacion\nelse:           #aplicamos la palabra reservada else y sus dos puntos, esta secci\u00f3n siempre se ejucatar\u00e1 siempre que no se cumpla la condici\u00f3n inicial\n    print(\"Es menor de edad\") #Recordemos que se debe aplicar una identacion\n</code></pre> <pre><code>Dar la edad: 15\nEs menor de edad\n</code></pre> <p>4. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n eligida</p> <pre><code># Damos el menu y guardamos la opcion del usuario\nprint(\"Calcualdora de Suma y Resta\")\nprint(\"1) Suma\")\nprint(\"2) Resta\")\nopcion = int(input())\n\nif opcion == 1:\n    print(\"====== SUMA =======\")\n    valor_1 = int(input(\"Dar valor 1: \" ))\n    valor_2 = int(input(\"Dar valor 2: \" ))\n    suma = valor_1 + valor_2\n    print(\"La suma es: \" + str(suma))\nelse:\n    print(\"====== RESTA =======\")\n    valor_1 = int(input(\"Dar valor 1: \" ))\n    valor_2 = int(input(\"Dar valor 2: \" ))\n    resta = valor_1 - valor_2\n    print(\"La resta es: \" + str(resta))\n</code></pre> <pre><code>Calcualdora de Suma y Resta\n1) Suma\n2) Resta\n2\n====== RESTA =======\nDar valor 1: 5\nDar valor 2: 6\nLa resta es: -1\n</code></pre>"},{"location":"06_Estructura_decision/#265-estructura-elif","title":"2.6.5 Estructura <code>elif</code>","text":"<p>En ocasiones necesitamos verificar varias opciones y en alguna tiene que encajar o por ultimas terminar en una opci\u00f3n. Para esto tenemos que combinar muchos <code>if</code> con su <code>else</code>, para ello tenemos el siguiente operador, el cual nos ayuda a hacerlo de manera corta y f\u00e1cil de leer. Para esto siempre debemos realizar una comparaci\u00f3n si entra en ese bloque o va al siguiente, y por ultimo si no coincide con alguna, termina en un bloque por default.</p> <pre><code>if comparacion_verdadera :\n    c\u00f3digo que ejecuta si es verdadero\n    m\u00e1s c\u00f3digo\n    ...\nelif comparacion_verdadera:\n    c\u00f3digo que ejecuta si es verdadero\n    m\u00e1s c\u00f3digo\n    ...\nelif comparacion_verdadera:\n    c\u00f3digo que ejecuta si es verdadero\n    m\u00e1s c\u00f3digo\n    ...\nelse:   #en este caso es opcional\n    de lo contrario se ejecuto este c\u00f3digo\n    m\u00e1s c\u00f3digo\n    ...\n</code></pre> <p>4. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n eligida, si da un opcion que no existe, simplemente termina el programa</p> <p>En esta ocasi\u00f3n si el usuario no da una opci\u00f3n que no existe, terminamos el programa sin indicar nada</p> <pre><code># Damos el menu y guardamos la opcion del usuario\nprint(\"Calcualdora de Suma y Resta\")\nprint(\"1) Suma\")\nprint(\"2) Resta\")\nopcion = int(input())\n\nif opcion == 1:\n    print(\"====== SUMA =======\")\n    valor_1 = int(input(\"Dar valor 1: \" ))\n    valor_2 = int(input(\"Dar valor 2: \" ))\n    suma = valor_1 + valor_2\n    print(\"La suma es: \" + str(suma))\nelif opcion == 2:\n    print(\"====== RESTA =======\")\n    valor_1 = int(input(\"Dar valor 1: \" ))\n    valor_2 = int(input(\"Dar valor 2: \" ))\n    resta = valor_1 - valor_2\n    print(\"La resta es: \" + str(resta))\nelif opcion &gt;= 3:\n    print('Saliendo del programa')\nelif opcion &lt; 0:\n    print('Saliendo del programa')\n\n#    Dont Repeat Yourself -&gt; No repitas a ti mismo\n</code></pre> <pre><code>Calcualdora de Suma y Resta\n1) Suma\n2) Resta\n2\n====== RESTA =======\nDar valor 1: 5\nDar valor 2: 2\nLa resta es: 3\n</code></pre> <p>5. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n eligida, si da un opcion que no existe indicar con un mensaje que la opci\u00f3n no existe</p> <pre><code># Damos el menu y guardamos la opcion del usuario\nprint(\"Calcualdora de Suma y Resta\")\nprint(\"1) Suma\")\nprint(\"2) Resta\")\nopcion = int(input())\n\nif opcion == 1:\n    print(\"====== SUMA =======\")\n    valor_1 = int(input(\"Dar valor 1: \" ))\n    valor_2 = int(input(\"Dar valor 2: \" ))\n    suma = valor_1 + valor_2\n    print(\"La suma es: \" + str(suma))\nelif opcion == 2:\n    print(\"====== RESTA =======\")\n    valor_1 = int(input(\"Dar valor 1: \" ))\n    valor_2 = int(input(\"Dar valor 2: \" ))\n    resta = valor_1 - valor_2\n    print(\"La resta es: \" + str(resta))\nelse:\n    print(\"Opcion no existe\")\n</code></pre> <pre><code>Calcualdora de Suma y Resta\n1) Suma\n2) Resta\n2\n====== RESTA =======\nDar valor 1: 65\nDar valor 2: 5\nLa resta es: 60\n</code></pre> <p>Ejercicios:</p> <ol> <li>Hacer la calculadora de area y perimetro de un cuadrado, las opciones son calcular el area y el perimetro del del cuadrado, si da una opcion que no existe, indicar con un mensaje que la \"opcion no existe\".</li> </ol>"},{"location":"06_Estructura_decision/#555-short-hands","title":"5.5.5 Short Hands","text":""},{"location":"06_Estructura_decision/#5551-short-hands-if","title":"5.5.5.1 Short Hands If","text":"<p>Existe una versi\u00f3n corta cuando si la condici\u00f3n se cumple entra a hacer una cosa y termina.</p> <pre><code>if condicion_verdadera: una_acci\u00f3n_a_realizar\n</code></pre> <pre><code>a = 5\nb = 3\n\nif a &gt; b: print(\"a es mas grande que b\")\n</code></pre> <pre><code>a es mas grande que b\n</code></pre>"},{"location":"06_Estructura_decision/#556-anidando-if","title":"5.5.6 Anidando <code>if</code>","text":"<p>Podemos meter <code>if</code> dentro de otro <code>if</code>, no hay limites de anidamiento. Se pueden utilizar la cantidad de <code>if</code> que sean necesarios. Esta acci\u00f3n se llama <code>ifs anidados</code></p> <pre><code>x = int(input(\"Dar un numero\"))\n\nif x &gt; 10:\n    print(\"Mayor a 10\")\n    if x &gt; 20:\n        print(\"Tambien mayor 20!\")\n    else:\n        print(\"Pero menor a 20.\")\n</code></pre> <pre><code>Dar un numero25\nMayor a 10\nTambien mayor 20!\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"07_Operadores_l%C3%B3gicos/","title":"07 Operadores l\u00f3gicos","text":""},{"location":"07_Operadores_l%C3%B3gicos/#27-operadores-logicos","title":"2.7 Operadores l\u00f3gicos","text":"<p>Contamos con los operadores l\u00f3gicos b\u00e1sicos, <code>AND</code>, <code>OR</code> y <code>NOT</code>. Los operadores l\u00f3gicos toman el objeto como booleanos para realizar la comparaci\u00f3n.</p> <p>Estos operadores nos ayudan a realizar operaciones m\u00e1s complejas en las decisiones y ciclos.</p> <p>Todo objeto con algun contenido ser\u00e1 tomado como <code>True</code>, a menos que:</p> <ul> <li>El objetos est\u00e9 vac\u00edo, como <code>[]</code>, <code>()</code>, <code>{}</code></li> <li>El objeto es <code>False</code></li> <li>El objeto es <code>0</code></li> <li>El objeto es <code>None</code></li> <li>El objeto es cadena vacia <code>\"\"</code> o <code>''</code></li> </ul> <p>En todos estos casos, se toman como <code>False</code>.</p>"},{"location":"07_Operadores_l%C3%B3gicos/#271-operador-and","title":"2.7.1 Operador <code>AND</code>","text":"<p>Con este operador se analizan dos comparaciones y <code>si ambas son verdaderas</code>, nos entrega un resultado <code>True</code>. La palabra reservada usada en python es <code>and</code>.</p> <p>Tabla de verdad para el operador <code>and</code></p> A B Resultado False False False False True False True False False True True True <p>La forma de aplicaci\u00f3n:</p> Ejemplo Analizando resultado Resultado 6 &lt; 10 <code>and</code> 3 &gt; 0 True <code>and</code> True True 40 &lt; 10 <code>and</code> 13 &gt; 5 False <code>and</code> True False 9 &lt; 12 <code>and</code> 4 &gt; 8 True <code>and</code> False False 6 &gt; 10 <code>and</code> 3 &lt; 0 False <code>and</code> False False"},{"location":"07_Operadores_l%C3%B3gicos/#2711-ejemplo-con-operador-logico-and","title":"2.7.1.1 Ejemplo con operador l\u00f3gico <code>and</code>","text":"<pre><code>a = 10\nb = 10\nc = -10\n\nif a &gt; 0 and b &gt; 0:\n    print(\"A y B son mayores que 0\")\n\nif a &gt; 0 and b &gt; 0 and c &gt; 0:\n    print(\"Todos los n\u00fameros son diferentes de 0\")\nelse:\n    print(\"Al menos un numero no es mayor a 0\")\n</code></pre> <pre><code>A y B son mayores que 0\nAl menos un numero no es mayor a 0\n</code></pre> <pre><code># Aqu\u00ed se comparan n\u00fameros, todos daran True, menos los que tenga el valor de 0\na = 10 # True\nb = -12 # True\nc = 0 # False\n\nif a and b and c:\n    print(\"Todos los n\u00fameros se toman como True\")\nelse:\n    print(\"Al menos un valor es False\")\n</code></pre> <pre><code>Al menos un valor es False\n</code></pre>"},{"location":"07_Operadores_l%C3%B3gicos/#272-operador-or","title":"2.7.2 Operador <code>OR</code>","text":"<p>Con este operador se analizan dos comparaciones y si alguna es verdadera, nos entrega un resultado <code>True</code>. La palabra reservada usada en python es <code>or</code>.</p> <p>Tabla de verdad para el operador <code>or</code></p> A B Resultado False False False False True True True False True True True True <p>La forma de aplicaci\u00f3n:</p> Ejemplo Analizando resultado Resultado 6 &lt; 10 <code>or</code> 3 &gt; 0 True <code>or</code> True True 40 &lt; 10 <code>or</code> 13 &gt; 5 False <code>or</code> True True 9 &lt; 12 <code>or</code> 4 &gt; 8 True <code>or</code> False True 6 &gt; 10 <code>or</code> 3 &lt; 0 False <code>or</code> False False"},{"location":"07_Operadores_l%C3%B3gicos/#2721-ejemplo-con-operador-logico-or","title":"2.7.2.1 Ejemplo con operador l\u00f3gico <code>or</code>","text":"<pre><code>a = 10\nb = -10\nc = 0\n\nif a &gt; 0 or b &gt; 0:\n    print(\"A o B es mayor que 0\")\nelse:\n    print(\"A y B no son mayores a 0\")\n\nif b &gt; 0 or c &gt; 0:\n    print(\"B o C es mayor que 0\")\nelse:\n    print(\"B y C NO no son mayores que 0\")\n</code></pre> <pre><code>A o B es mayor que 0\nB y C NO no son mayores que 0\n</code></pre> <pre><code>a = 10\nb = 12\nc = 0\n\nif a or b or c:\n    print(\"Al menos un valor se considera True\")\nelse:\n    print(\"Todos los valores dan como resultado False\")\n</code></pre> <pre><code>Al menos un valor se considera True\n</code></pre>"},{"location":"07_Operadores_l%C3%B3gicos/#273-operador-not","title":"2.7.3 Operador <code>not</code>","text":"<p>Este operador invierte el resultado booleana que recibe. La palabra reservada es <code>not</code></p> <p>Tabla de verdad para el operador <code>not</code></p> A Resultado False True True False <p>La forma de aplicaci\u00f3n:</p> Ejemplo Analizando resultado Resultado <code>not</code>(6 &lt; 10) <code>not</code>(True) False <code>not</code>(20 &lt; 12) <code>not</code>(False) True <code>not</code>(2 &lt; 10) <code>not</code>(True) False <code>not</code>(False) <code>not</code>(False) True"},{"location":"07_Operadores_l%C3%B3gicos/#2731-ejemplo-con-operador-logico-not","title":"2.7.3.1 Ejemplo con operador l\u00f3gico <code>not</code>","text":"<pre><code>a = 10\n\nif not a: #Invierto el valor booleano que da 10\n    print(\"El valor booleane es True\")\n\nresiduo_3 = a%3\nresiduo_5 = a%5\n\nprint(residuo_3)\nprint(residuo_5)\n\nif not ( residuo_3 == 0 or residuo_5 == 0):\n    print(\"10 no es divisible entre 3 o 5\")\nelse:\n    print(\"10 es divisible entre 3 or 5\")\n</code></pre> <pre><code>1\n0\n10 es divisible entre 3 or 5\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"08_Estructura_de_Repeticion_-_while/","title":"08 Estructura de Repeticion   while","text":""},{"location":"08_Estructura_de_Repeticion_-_while/#28-estructura-de-repeticion-while","title":"2.8 Estructura de repetici\u00f3n <code>while</code>","text":"<p>Dentro de la programaci\u00f3n tenemos estructuras de control para repetir acciones. Hay 2 estructuras que podemos utilizar, los ciclos son <code>while</code>,  <code>for</code>; este ultimo se ver\u00e1 en otro c\u00e1pitulo.</p>"},{"location":"08_Estructura_de_Repeticion_-_while/#281-estructura-while","title":"2.8.1 Estructura <code>while</code>","text":"<p>La sintaxis de la estructura <code>while</code> es muy sencilla; es la siguiente:</p> <pre><code>while condicion_verdadera:\n    l\u00ednea de c\u00f3digo\n    l\u00ednea de c\u00f3digo\n    l\u00ednea de c\u00f3digo\n    ...\n</code></pre> <p>La forma de leerla es: mientras la condici\u00f3n se cumpla seguira dentro del ciclo.</p> <p>Lo que tiene esta estructura es que al momento de preguntar por primera vez, sino cumple la condici\u00f3n no entra al ciclo.</p>"},{"location":"08_Estructura_de_Repeticion_-_while/#2811-ejemplo","title":"2.8.1.1 Ejemplo","text":"<ol> <li>Vamos a imprimir 10 n\u00fameros, desde el 0 al 9, en cada vuelta del ciclo debemos tener una variable que nos ayude a saber cuando hayamos terminado.</li> </ol> <pre><code>contador = 0 # declaro mi variable auxiliar \"contador\"\n\nwhile contador &lt; 10:\n    print(contador)         # imprimir el valor del contador\n    contador = contador + 1 # incremento al contador\n\nprint(\"El ciclo termino\")\n</code></pre> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nEl ciclo termino\n</code></pre> <ol> <li>Imprimir la tabla del 7, que vaya desde el 1 al 10.</li> </ol> <pre><code>tabla = 7\ncontador = 1\n\nwhile contador &lt;= 10:\n    print(tabla * contador)\n    contador += 1\n</code></pre> <pre><code>7\n14\n21\n28\n35\n42\n49\n56\n63\n70\n</code></pre> <ol> <li>solicitar al usuario 10 n\u00fameros e indicar si es par o impar</li> </ol> <pre><code>contador = 1\n\nprint(\"Par o Impar\")\n\nwhile contador &lt;= 10:\n    numero = int(input(\"Dar valor \" + str(contador) + \": \"))\n\n    if numero % 2 == 0:\n        print(\"El valor \" + str(numero) + \" es par\")\n    else:\n        print(\"El valor \" + str(numero) + \" es impar\")\n    print(\"-------------------------------------------\")\n\n    contador +=1\n</code></pre> <pre><code>Par o Impar\nDar valor 1: 5\nEl valor 5 es impar\n-------------------------------------------\nDar valor 2: 6\nEl valor 6 es par\n-------------------------------------------\nDar valor 3: 5\nEl valor 5 es impar\n-------------------------------------------\nDar valor 4: 5\nEl valor 5 es impar\n-------------------------------------------\nDar valor 5: 6\nEl valor 6 es par\n-------------------------------------------\nDar valor 6: 5\nEl valor 5 es impar\n-------------------------------------------\nDar valor 7: 5\nEl valor 5 es impar\n-------------------------------------------\nDar valor 8: 8\nEl valor 8 es par\n-------------------------------------------\nDar valor 9: 6\nEl valor 6 es par\n-------------------------------------------\nDar valor 10: 6\nEl valor 6 es par\n-------------------------------------------\n</code></pre> <ol> <li>Solicitar las 3 calificaciones de materia e imprimir su promedio con la frase de \"Aprobo\" o \"Reprobo\" dependiendo el caso</li> </ol> <pre><code>print(\"Calculadora de promedio final\")\n\nsuma = 0 # guarda la suma de los parciales\ncalificaciones = 1 # variable que lleva el coteo\n\nwhile calificaciones &lt;= 3:\n    calificacion = int( input(\"Dar calificacion \" + str(calificaciones) + \": \") )\n    suma += calificacion\n    calificaciones += 1\n\npromedio = suma / 3\n\nif(promedio &lt; 6 ):\n    print(\"No has aprobado, tu promedio es \" + str(promedio))\nelse:\n    print(\"Has aprobado, tu promedio es \" + str(promedio))\n</code></pre> <ol> <li>Reaizar una calculadora para sumar y restar, pero hasta que el usuario de la opcion de salir el programa terminar\u00e1</li> </ol> <pre><code>opcion = 0\n\nwhile opcion != 3:\n    print(\"-------------------------------------\")\n    print(\"Calculadora Suma y Resta\")\n    print(\"1. Suma\")\n    print(\"2. Resta\")\n    print(\"3. Salir\")\n    opcion = int(input())\n\n    if opcion == 1:\n        valor1 = float(input(\"Dar el primer valor\"))\n        valor2 = float(input(\"Dar el segundo valor\"))\n        print(\"La suma es: \" + str(valor1 + valor2))\n    elif opcion == 2:\n        valor1 = float(input(\"Dar el primer valor\"))\n        valor2 = float(input(\"Dar el segundo valor\"))\n        print(\"La resta es: \" + str(valor1 - valor2))\n    elif opcion &gt; 3 or opcion &lt; 1:\n        print(\"La opcion no existe\")\n\nprint(\"Programa a finalizado\")\n</code></pre> <pre><code>-------------------------------------\nCalculadora Suma y Resta\n1. Suma\n2. Resta\n3. Salir\n3\nPrograma a finalizado\n</code></pre>"},{"location":"08_Estructura_de_Repeticion_-_while/#ejercicios","title":"Ejercicios:","text":"<ol> <li>Imprimir la tabla del 8, del 1 al 10, con el siguiente formato \"8 x 1 = 8\"</li> <li>Realizar un programa que solicite 10 n\u00fameros e imprima si es par o impar y si es mayor a 10 que lo indique, de lo contrario solo dice \"es impar\"</li> <li>Realizar un programa solicite los 3 parciales de Matematicas, e imprimir el promedio, pero si reprueba, ahora tendra que pedir el resultado de su extra, en caso que haya pasado el extra, le dara su calificacion final y le dira \"aprobado\". En caso que no apruebe su extra, solo le dir\u00e1 \"estas en recursamiento\"</li> </ol>"},{"location":"08_Estructura_de_Repeticion_-_while/#282-continue-y-break","title":"2.8.2 Continue y Break","text":"<p>Existen 2 palabras reservadas que nos ayudan a un control mas complejo dentro de los ciclos, que son <code>break</code> y <code>continue</code>.</p> <ul> <li>La palabra reservada <code>break</code> me sirve para romper un ciclo cuando yo no necesite, muy util en ciclos infinitos que necesitemos <code>romper</code>.</li> <li>La palabra reservada <code>continue</code> me sirve para ignorar el c\u00f3digo restante e iniciar la siguiente vuelta del ciclo.</li> </ul> <pre><code># Vamos a hacer un ciclo infinito el cual vamos a romper cuando una condicion se cumpla\n\ncontador = 0\n\nwhile True: # ciclo infinito\n    print('El valor del contador es: ' + str(contador))\n    contador+=1\n\n    if contador == 5: # en el momento que esta condicion se cumple entra y encuentra break\n        print(\"Se rompe el ciclo en el valor \" + str(contador))\n        break   # cuando se ejecute esta linea el ciclo termina\n</code></pre> <pre><code>El valor del contador es: 0\nEl valor del contador es: 1\nEl valor del contador es: 2\nEl valor del contador es: 3\nEl valor del contador es: 4\nSe rompe el ciclo en el valor 5\n</code></pre> <pre><code># vamos a hacer que el ciclo ignore todo el c\u00f3digo que tiene por debajo cuando encuentre la palabra continue\n\ncontador = 0\n\nwhile contador &lt; 5:\n    contador+=1\n\n    if contador == 3:\n        continue\n    print(f\"El valor del contador es: {contador}\")\n</code></pre> <pre><code>El valor del contador es: 1\nEl valor del contador es: 2\nEl valor del contador es: 4\nEl valor del contador es: 5\n</code></pre> <pre><code># Realizar una calculadora que sume y reste, mostrando un menu indicando las opciones,\n# Debe tener la opcion de salir, en caso que ingrese una opcion que no existe,\n# mandar el mensaje de que la opcion no es valida. El programa termina cuando el usuario\n# ingresa la opcion de salir, de lo contrario debe seguir mostrando el menu con las opciones\nwhile True:\n    print(\"-------------------------------------\")\n    print(\"Calculadora Suma y Resta\")\n    print(\"1. Suma\")\n    print(\"2. Resta\")\n    print(\"3. Salir\")\n    opcion = int(input())\n\n    if opcion == 1:\n        valor1 = float(input(\"Dar el primer valor\"))\n        valor2 = float(input(\"Dar el segundo valor\"))\n        suma = valor1 + valo2\n        print(\"La suma es: \" + str(suma))\n    elif opcion == 2:\n        valor1 = float(input(\"Dar el primer valor\"))\n        valor2 = float(input(\"Dar el segundo valor\"))\n        print(\"La resta es: \" + str(valor1 - valor2))\n    elif opcion == 3:\n        print(\"Programa a finalizado\")\n        break\n    else:\n        print(\"La opcion no existe\")\n</code></pre> <pre><code>-------------------------------------\nCalculadora Suma y Resta\n1. Suma\n2. Resta\n3. Salir\n3\nPrograma a finalizado\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"09_1_Modulos/","title":"09 1 Modulos","text":""},{"location":"09_1_Modulos/#91-modulos","title":"9.1 M\u00f3dulos","text":"<p>Son funciones que existen dentro de Python para realizar alguna cosa que necesitemos o sean comunes para resolver alg\u00fan problema. Muchos m\u00f3dulos se deben importar, dado que no est\u00e1n disponible con solo invocar la funci\u00f3n a ocupar.</p>"},{"location":"09_1_Modulos/#modulo-random","title":"M\u00f3dulo <code>random</code>","text":"<p>El m\u00f3dulo <code>random</code> genera un n\u00famero al azar 0.0 &lt;= x &lt; 1.0. Pero tiene varias funciones que nos pueden ayudar dependiendo que vayamos a realizar.</p> <p>Tienes muchas funciones \u00fatiles, pero aqu\u00ed solo se mencionan algunas, para m\u00e1s detalles ir a la documentaci\u00f3n oficial:</p> <ul> <li><code>random()</code>: Retorna un n\u00famero random entre 0.0 a 1.0</li> <li><code>randrange(value)</code>: Devuelve un n\u00famero entero entre 0 al valor dado menos 1.</li> <li><code>choice(list):</code> Se le pasa una lista y retorna alg\u00fan valor de ah\u00ed al azar</li> <li><code>randint(min, max)</code>: Retorna un valor entero aleatorio entre el m\u00ednimo y m\u00e1ximo que se le indique</li> </ul> <p>Documentaci\u00f3n oficial de random</p> <pre><code>import random # siempre que queremos usar el modulo random lo debemos importarlo\n\nnumero_random = random.random() # esto nos regresa un numero al azar que puede ir de 0.0 a 1.0\n\nprint(numero_random)\nprint('----------------------------------------')\ncount = 0\nwhile count &lt; 10:\n    print(random.random())\n    count +=1\n</code></pre> <pre><code>0.16323426041771194\n----------------------------------------\n0.9028043426214072\n0.4074056166764164\n0.19779655230735627\n0.7998235642729651\n0.35158488605961924\n0.9839925531772616\n0.5685053478325315\n0.04093356698172834\n0.02064234430594214\n0.438587694506148\n</code></pre> <pre><code>#nos devuelve un valor entero de 0 al valor que le dimos - 1\n\nnumero_en_rango = random.randrange(101)\n\nprint(numero_en_rango)\n</code></pre> <pre><code>63\n</code></pre> <pre><code># nos devulve un valor en el rango de 5 (min) al 15 (max)\n\nnumero_rango_min_max = random.randint(3, 15)\n\nprint(numero_rango_min_max)\n</code></pre> <pre><code>5\n</code></pre> <pre><code># con esta funci\u00f3n le podemos pasar una lista y devolvera un valor de esa lista al azar\n\nlista = [\"hola\",\"mensaje\", \"texto\",\"mecatronica\",\"cbtis85\"]\nvalor = random.choice(lista)\n\nprint(valor)\n</code></pre> <pre><code>mensaje\n</code></pre> <pre><code>#Juego de adivina el numero vBTV\n\nimport random\n\nnumber = random.randint(1,10)\n\nprint(\"Juego de adivina el numero\")\nprint(\"El numero esta entre 1 y 10\")\nprint(\"Tienes 5 intentos\")\nprint(\"Mucha suerte!!!!\")\n\nintentos = 0\nwhile True:\n    nuevo = int(input(\"Dame un valor: \"))\n\n    if nuevo &lt; number:\n        print(\"El numero es MAYOR\")\n        intentos +=1\n    elif nuevo &gt; number:\n        print(\"El numero es MENOR\")\n        intentos +=1\n    else:\n        print(\"Felicidades le has atinado\")\n        break\n\n    print(f\"Llevas {intentos} intentos\")\n\n    if intentos == 5:\n        print(\"Perdiste, lastima margarito  T.T\")\n        break\n</code></pre> <pre><code>Juego de adivina el numero\nEl numero esta entre 1 y 10\nTienes 5 intentos\nMucha suerte!!!!\nDame un valor: 5\nEl numero es MAYOR\nLlevas 1 intentos\nDame un valor: 6\nEl numero es MAYOR\nLlevas 2 intentos\nDame un valor: 36\nEl numero es MENOR\nLlevas 3 intentos\nDame un valor: 3\nEl numero es MAYOR\nLlevas 4 intentos\nDame un valor: 5\nEl numero es MAYOR\nLlevas 5 intentos\nPerdiste, lastima margarito  T.T\n</code></pre> <pre><code>#Juego de adivina el numero vATM\nimport random\n\nnum_random = random.randint(1,10) #genera un numero al azar en ese rango\n\nprint(\"JUEGO + ADIVINA EL NUMERO\")\nprint(\"El numero esta entre 1 al 10\")\nprint(\"Tienes solo 5 intentos\")\nprint(\"Mucha suerte &gt;:) \")\n\nintentos = 0\nwhile True:\n    number = int(input(\"Dar el numero: \"))\n\n    if number &lt; num_random:\n        print(\"El numero es mayor\")\n        intentos +=1\n    elif number &gt; num_random:\n        print(\"El numero es menor\")\n        intentos +=1\n    else:\n        print(\"Felicidades le atinaste :D\")\n        break\n\n    if intentos == 5:\n        print(f\"Fallaste {intentos} veces\")\n        print(f\"EL numero era: {num_random}\")\n        print(f\"Lastima margarito\")\n        break\n</code></pre> <pre><code>JUEGO + ADIVINA EL NUMERO\nEl numero esta entre 1 al 10\nTienes solo 5 intentos\nMucha suerte &gt;:)\nDar el numero: 5\nEl numero es mayor\nDar el numero: 6\nEl numero es mayor\nDar el numero: 5\nEl numero es mayor\nDar el numero: 6\nEl numero es mayor\nDar el numero: 5\nEl numero es mayor\nFallaste 5 veces\nEL numero era: 8\nLastima margarito\n</code></pre>"},{"location":"09_1_Modulos/#modulo-math","title":"M\u00f3dulo <code>math</code>","text":"<p>Este m\u00f3dulo es enfocado a matem\u00e1ticas, tiene funciones que nos facilitan realizar c\u00e1lculos complejos.</p> <ul> <li><code>ceil(x)</code>: Retorna un entero. Redondeo hacia abajo</li> <li><code>floor(x)</code>: Retorna un entero. Redondeo hacia arriba.</li> <li><code>sqrt(x)</code>: Raiz cuadrada de <code>x</code>.</li> <li><code>pow(base, potencia)</code>: es equivalente a base ** potencia = base ^ potencia</li> <li><code>cos(x)</code>: coseno de x en radianes</li> <li><code>sin(x)</code>: seno de x en radianes</li> <li><code>tan(x)</code>: tangente de x en radianes</li> <li><code>pi</code>: Devuelve el valor de PI =\u03c0 = 3.141592...</li> <li><code>e</code>: Devuelve el valor de E (Euler) = 2.718281...</li> </ul> <p>Documentaci\u00f3n oficial de math</p> <pre><code># Redondeos\n\nimport math\n\nvalor = 2.625\n\nr_arriba = math.ceil(valor)\nr_abajo = math.floor(valor)\n\nprint(f'Sin redondeo {valor}')\nprint(f'Redondeo hacia abajo {r_abajo}')\nprint(f'Redondeo hacia arriba {r_arriba}')\n</code></pre> <pre><code>Sin redondeo 2.625\nRedondeo hacia abajo 2\nRedondeo hacia arriba 3\n</code></pre> <pre><code># Potencia y raiz cuadrada\n\npotencia = math.pow(2,3) # 2^3 = 2**3\nraiz = math.sqrt(25) # raiz cuadrada de 25\n\nprint(f'Elevando 2 al cubo es: {potencia}')\nprint(f'La raiz cuadrada de 25 es: {raiz}')\n</code></pre> <pre><code>Elevando 2 al cubo es: 8.0\nLa raiz cuadrada de 25 es: 5.0\n</code></pre> <pre><code># Funciones trigonometricas, siempre se dan los resultado en radianes,\n# si se quiere manejar grados tenemos que hacer la conversion\n\ncoseno = math.cos(45)\nseno = math.sin(45)\ntangente = math.tan(45)\n\nprint(f'Conseno de 30 es: {coseno}')\nprint(f'Seno de 30 es: {seno}')\nprint(f'Tangete de de 30 es: {tangente}')\n</code></pre> <pre><code>Conseno de 30 es: 0.5253219888177297\nSeno de 30 es: 0.8509035245341184\nTangete de de 30 es: 1.6197751905438615\n</code></pre> <pre><code># Normalmente todos los lenguajes tiene una libreria matematica y traen las constantes matematicas comunes\n\nprint(f'Valor de pi: {math.pi}')\nprint(f'Valor de Euler: {math.e}')\n</code></pre> <pre><code>Valor de pi: 3.141592653589793\nValor de Euler: 2.718281828459045\n</code></pre>"},{"location":"09_1_Modulos/#la-funcion-sum","title":"La funci\u00f3n <code>sum</code>","text":"<p>La funci\u00f3n <code>sum</code> es una utilidad, para realizar una sumatoria r\u00e1pida para obtener la suma de una lista sin tener que hacerlo a mano, Python trae esta utilidad para mayor comodidad.</p> <p>Sintaxis:</p> <pre><code>sum(list)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li><code>list</code> : es una lista de n\u00fameros, pueden ser enteros o flotantes</li> <li><code>return</code>: El resultado de la sumatoria de los valores de la lista</li> </ul> <pre><code># Tenemos a disposicion una funci\u00f3n llamada sum\n\nn\u00fameros =[1.6,2.6,3,6,7,5,85,5,87]\nsumatoria = sum(n\u00fameros)\n\nprint(f'Resultado de la suma: {sumatoria}')\n</code></pre>"},{"location":"09_1_Modulos/#funciones-disponibles-por-default","title":"Funciones disponibles por default","text":"<p>Cuando iniciamos un programa en python, por default ya contamos con varias funciones disponibles para utilizarlas.</p> <p>Para ver las funciones disponibles ir a la Documentacion de python \"Funciones\"</p> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"09_2_Strings/","title":"09 2 Strings","text":""},{"location":"09_2_Strings/#strings-str","title":"Strings (str)","text":"<p>En esta secci\u00f3n veremos con mas detalle la manipulacion de strings. La manipulacion de string a detalle es sumamente util para separarlo, saber si contiene alguna letra, palabra u oraci\u00f3n. Recordemos que todo en python es un objeto y al ser un objeto contienen por default muchos m\u00e9todos con los cuales podemos operar ese <code>string</code>.</p>"},{"location":"09_2_Strings/#convertir-a-minusculas-lower","title":"Convertir a min\u00fasculas (lower)","text":"<p>Una funci\u00f3n que nos fascilita es convertir todo el string a min\u00fasculas. Ignora simbolos y n\u00fameros.</p> <ul> <li>lower(): Converts a string into lower case</li> </ul> <pre><code># Todas la letras las pasara a min\u00fasculas\n\nmensaje = \"Hola Como ESTAS\"\nminuscula = mensaje.lower()\n\nprint(mensaje)\nprint(minuscula)\n</code></pre> <pre><code>Hola Como ESTAS\nhola como estas\n</code></pre>"},{"location":"09_2_Strings/#convertir-a-mayusculas-upper","title":"Convertir a May\u00fasculas (upper)","text":"<p>Una funci\u00f3n que nos fascilita es convertir todo el string a may\u00fasculas. Ignora simbolos y n\u00fameros.</p> <ul> <li>upper(): Converts a string into upper case</li> </ul> <pre><code># Todas la letras las pasara a may\u00fasculas\n\nmensaje = \"Hola Como ESTAS\"\nupper = mensaje.upper()\n\nprint(mensaje)\nprint(upper)\n</code></pre> <pre><code>Hola Como ESTAS\nHOLA COMO ESTAS\n</code></pre>"},{"location":"09_2_Strings/#convertir-a-mayusculas-capitalize","title":"Convertir a May\u00fasculas (capitalize)","text":"<p>Una funci\u00f3n que nos fascilita es convertir solo la primer letra a may\u00fasculas, el resto a min\u00fasculas. Esto es \u00fatil para cuando queremos que una oraci\u00f3n inicie en mayusculas o palabra. Ignora simbolos y n\u00fameros.</p> <ul> <li>capitalize(): Converts the first character to upper case</li> </ul> <pre><code># Todas la letras las pasara a may\u00fasculas\n\nmensaje = \"hola cOMO ESTAS\"\ncapital = mensaje.capitalize()\n\nprint(mensaje)\nprint(capital)\n</code></pre> <pre><code>hola cOMO ESTAS\nHola como estas\n</code></pre>"},{"location":"09_2_Strings/#contador-de-palabras-count","title":"Contador de palabras (count)","text":"<p>Los string cuenta con m\u00e9todo el cual nos ayuda directamente a saber cuantas veces se encuentra una palabra dentro de ese string, debe ser igual la palabra a la que se le paso.</p> <ul> <li>count(value, start, end): method returns the number of times a specified value appears in the string</li> </ul> <p>Parametros:</p> <ul> <li><code>value</code>: Required. A String. The string to value to search for</li> <li><code>start</code>: Optional. An Integer. The position to start the search. Default is 0</li> <li><code>end</code>: Optional. An Integer. The position to end the search. Default is the end of the string</li> </ul> <pre><code>phrase = \"Ingenieria en Sistemas es lo mejor del mundo, tienes el mundo en tus manos\"\ncount = phrase.count(\"mundo\")\nprint(f'Veces que sale la palabra \\\"mundo\\\" es: {count}')\n</code></pre> <pre><code>Veces que sale la palabra \"mundo\" es: 2\n</code></pre>"},{"location":"09_2_Strings/#es-o-no-es-un","title":"Es o no es un","text":"<p>En ocasiones queremos conocer si un string es o esta en cierta forma.</p> <ul> <li><code>isdigit()</code>:  Returns True if all characters in the string are digits</li> <li><code>islower()</code>:  Returns True if all characters in the string are lower case</li> <li><code>isnumeric()</code>:    Returns True if all characters in the string are numeric</li> <li><code>isspace()</code>:  Returns True if all characters in the string are whitespaces</li> <li><code>isupper()</code>:  Returns True if all characters in the string are upper case</li> </ul> <pre><code>print(f'Es un n\u00famero: {\"4\".isdigit()}')\nprint(f'Es un n\u00famero: {\"4\".isnumeric()}')\nprint(f'Esta en min\u00fasculas: {\"hola\".islower()}')\nprint(f'Esta en may\u00fasculas: {\"HOLA\".isupper()}')\nprint(f'Son espacios: {\" \".isspace()}')\n</code></pre> <pre><code>Es un n\u00famero: True\nEs un n\u00famero: True\nEsta en min\u00fasculas: True\nEsta en may\u00fasculas: True\nSon espacios: True\n</code></pre> <ul> <li>endswith(value)   Returns true if the string ends with the specified value</li> <li>title()   Converts the first character of each word to upper case</li> <li>find()    Searches the string for a specified value and returns the position of where it was found</li> <li>index()   Searches the string for a specified value and returns the position of where it was found</li> <li>format()  Formats specified values in a string</li> <li>join()    Joins the elements of an iterable to the end of the string</li> <li>lstrip()  Returns a left trim version of the string</li> <li>replace() Returns a string where a specified value is replaced with a specified value</li> <li>rfind()   Searches the string for a specified value and returns the last position of where it was found</li> <li>rindex()  Searches the string for a specified value and returns the last position of where it was found</li> <li>rsplit()  Splits the string at the specified separator, and returns a list</li> <li>rstrip()  Returns a right trim version of the string</li> <li>split()   Splits the string at the specified separator, and returns a list</li> <li>splitlines()  Splits the string at line breaks and returns a list</li> <li>startswith()  Returns true if the string starts with the specified value</li> <li>strip()   Returns a trimmed version of the string</li> </ul> <p>https://www.w3schools.com/python/python_ref_string.asp</p> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"09_Estructura_repeticionr/","title":"09 Estructura repeticionr","text":""},{"location":"09_Estructura_repeticionr/#29-estructura-de-repeticion-for","title":"2.9 Estructura de repetici\u00f3n <code>for</code>","text":"<p>La siguiente estructura de control se llama <code>for</code>. Esta estructura tiene un comportamiento similar a <code>while</code>. En esencial hace lo mismo, repite hasta un limite pero este se da distinto. <code>For each</code>.</p> <p>Sintasix:</p> <pre><code>for variable in iterador :\n    c\u00f3digo a ejecutar\n    c\u00f3digo a ejecutar\n    c\u00f3digo a ejecutar\n    ...\n</code></pre>"},{"location":"09_Estructura_repeticionr/#funcion-range","title":"Funci\u00f3n <code>range()</code>","text":"<p>La funci\u00f3n <code>range()</code> retorna un secuencia de n\u00fameros, comenzando por default en 0 e incrementando en 1, y se detiene antes del n\u00famero especificado.</p> <p>Sintaxis</p> <pre><code>range(start, stop, step)\n</code></pre> <p>Parametros:</p> <ul> <li><code>start</code>   (opcional). Un numero entero especificamente para la posicion inicial, por default es 0</li> <li><code>stop</code>    (Requerido). Un numero entero que especifica en donde se detendra.</li> <li><code>step</code>    (opcional). Un numero entero que especifica el incremento. Por default es 1.</li> </ul> <p>Esta funci\u00f3n se utiliza con el ciclo <code>for</code></p> <pre><code>#Vamos a imprimir 10 n\u00fameros, del 0 al 9, recordemos que el n\u00famero que le pasamos es el tope y ese no se imprime,\n#y el valor inicial por default es 0, el incremento es de 1 en 1\n\nfor valor in range(10):\n    print(f'el valor actual es: \"{valor}\"')\n</code></pre> <pre><code>el valor actual es: \"0\"\nel valor actual es: \"1\"\nel valor actual es: \"2\"\nel valor actual es: \"3\"\nel valor actual es: \"4\"\nel valor actual es: \"5\"\nel valor actual es: \"6\"\nel valor actual es: \"7\"\nel valor actual es: \"8\"\nel valor actual es: \"9\"\n</code></pre> <pre><code># Ahora vamos a imprimir en un rango, entonces se le pasa el inicio y el fin,\n# comenzando en 2 y terminando en 11\n\nfor valor in range(2,12):\n    print(f'el valor actual es: \"{valor}\"')\n</code></pre> <pre><code>el valor actual es: \"2\"\nel valor actual es: \"3\"\nel valor actual es: \"4\"\nel valor actual es: \"5\"\nel valor actual es: \"6\"\nel valor actual es: \"7\"\nel valor actual es: \"8\"\nel valor actual es: \"9\"\nel valor actual es: \"10\"\nel valor actual es: \"11\"\n</code></pre> <pre><code># Ahora vamos a imprimir en un rango, entonces se le pasa el inicio y el fin,\n# comenzando en 1 y terminando en 20, de 2 en 2\n\nfor valor in range(3,22,2):\n    print(valor)\n</code></pre> <pre><code>3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n</code></pre> <p>Nota: Cuando queramos ya sea comenzar en un numero distinto, o cero con un incremento diferente se tiene que pasar el valor de incremento forzosamente</p>"},{"location":"09_Estructura_repeticionr/#ejemplos","title":"Ejemplos","text":"<p>1. Solicitar 3 calificaciones del parcial y calcular el promedio</p> <pre><code>suma = 0.0\n\nfor calificacion in range(3):\n    suma += float(input(f\"Dar el parcial {calificacion + 1}: \"))\n\nprint(f\"El promedio es {suma / 3}\")\n</code></pre> <pre><code>Dar el parcial 1: 10\nDar el parcial 2: 8\nDar el parcial 3: 7\nEl promedio es 8.333333333333334\n</code></pre> <p>2. Imprimir la tabla del 7 con el formato \"7 x 10 = 70\", comenzando en 7x1 y terminando ene 7x10. Utilizando la estructura for y la funci\u00f3n range()</p> <pre><code>tabla = 7\n\nfor contador in range(1,11):\n    resultado = tabla * contador\n    print( str(tabla) + \" x \" + str(contador) + \" = \" +  str(resultado) )\n</code></pre> <pre><code>7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n</code></pre>"},{"location":"09_Estructura_repeticionr/#break-y-continue","title":"Break y Continue","text":"<p>La palabra reservada break y continue tambien sirve en el ciclo for</p> <pre><code>for v in range(10):\n    print(v)\n\n    if v == 3:\n        break\n</code></pre> <pre><code>0\n1\n2\n3\n</code></pre> <pre><code>mensaje = \"Lo mejor del mundo es saber programar\"\n\nfor letra in mensaje:\n    print(letra)\n</code></pre> <pre><code>L\no\n\nm\ne\nj\no\nr\n\nd\ne\nl\n\nm\nu\nn\nd\no\n\ne\ns\n\ns\na\nb\ne\nr\n\np\nr\no\ng\nr\na\nm\na\nr\n</code></pre> <pre><code>#Comparativa entre el for vs while\n# imprimir del  0 al 9\n\nprint('Con FOR')\n\nfor contador in range(0,10):\n    print(contador)\n\nprint('---------------')\n\nprint('Con WHILE')\n\ncontador = 0\n\nwhile contador &lt; 10:\n    print(contador)\n    contador += 1\n</code></pre> <pre><code>Con FOR\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n---------------\nCon WHILE\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre> <p>Ejercicio:</p> <ol> <li>Recorer un rango del 0 al 10 e indicar cuales son par e impar</li> <li>Recorer un rango del 5 al 32 e indicar los que sean multiplos de 5</li> <li>Solicitarle al usuario que tabla desea imprimir, indicando desde donde comienza y donde termina</li> <li>Calcular el promedio de la sumatoria de los n\u00fameros pares desde el 2 hasta el 200</li> </ol> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"10_Colecciones/","title":"10 Colecciones","text":""},{"location":"10_Colecciones/#210-colecciones","title":"2.10 Colecciones","text":"<p>Dentro de los lenguajes de programaci\u00f3n hay tipos datos que son estructuras que pueden contener m\u00e1s de un dato, a comparaci\u00f3n de los tipos de datos b\u00e1sicos, estas estructuras pueden contener muchos de esos datos b\u00e1sicos en su interior. Podr\u00edas decir que es una base de datos, pero esta solo existe mientras est\u00e1 la aplicaci\u00f3n en ejecuci\u00f3n, los datos son temporales. Las colecciones pueden contener cualquier tipo de dato, incluso mas colecciones.</p> <p>En python son los siguientes:</p> <ul> <li><code>Tuplas</code> Tipo de dato Inmutable</li> <li><code>Listas (arrays)</code> Tipo de Mutable</li> <li><code>Diccionarios</code></li> <li><code>Sets</code></li> </ul> <p>Nota: En este curso solo se cubriran las tuplas y las listas.</p>"},{"location":"10_Colecciones/#101-tuplas","title":"10.1 Tuplas","text":"<p>Es una estructura de datos inmutables, una vez declarada no puede cambiar su contenido, ni agregar, ni eliminar, no modificar.</p> <p>Cada posicion de los datos tiene un indice (index), el cual me ayuda a acceder a el. La primera posicion siempre es 0.</p> <p>La convencion de como declarar o nombrar a una lista o tupla es en plural</p> <p>Parametros a destacar:</p> <ul> <li>index: Indice</li> <li>len: Longitud</li> </ul> <p>Sintaxis:</p> <pre><code>nombre_tupla = (dato1, dato2, ..., datoN)\n</code></pre> <pre><code># Declaracion de una tupla\n\n# Tiene 3 posiciones, comenzado en el 0. Largo de 3\n\ncalificaciones = (8,7,9)\n\nprint(calificaciones)\n\ntype(calificaciones)\n</code></pre> <pre><code>(8, 7, 9)\n\n\n\n\n\ntuple\n</code></pre> <pre><code># vamos a acceder a cada dato\n\ncalificacion1 = calificaciones[0]\ncalificacion2 = calificaciones[1]\ncalificacion3 = calificaciones[2]\n\nprint(calificacion1)\nprint(calificacion2)\nprint(calificacion3)\n</code></pre> <pre><code>8\n7\n9\n</code></pre> <pre><code># intentando modificar una tupla\n\ncalificaciones[0] = 10\n</code></pre> <pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n/tmp/ipykernel_890/2729348892.py in &lt;module&gt;\n      1 # intentando modificar una tupla\n      2\n----&gt; 3 calificaciones[0] = 10\n\n\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <pre><code># intentando borrar un elemento de la tupla\n\ndel calificaciones[1]\n</code></pre> <pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n/tmp/ipykernel_890/1285800133.py in &lt;module&gt;\n      1 # intentando borrar un elemento de la tupla\n      2\n----&gt; 3 del calificaciones[1]\n\n\nTypeError: 'tuple' object doesn't support item deletion\n</code></pre> <pre><code># Recorriendo tuplas con for y while\n\nfor calificacion in calificaciones:\n    print(calificacion)\n\nprint('-------------------------')\n\ncontador = 0\n\nwhile contador &lt; len(calificaciones):\n    calificacion = calificaciones[contador]\n    print(calificacion)\n    contador += 1\n</code></pre> <pre><code>8\n7\n9\n-------------------------\n8\n7\n9\n</code></pre>"},{"location":"10_Colecciones/#102-listas","title":"10.2 Listas","text":"<p>Es una coleccion de elementos ordenados. En otro lenguajes es conocido como un <code>array</code>. A este tipo de coleccion es Mutable, es decir, se le pueden agregar, eliminar, quitar, elementos. Podemos hacer diversas operaciones con ellos.</p> <p>Elementos que debemos tener en cuenta son:</p> <ul> <li><code>index</code>: El indice o posicion de cada elemento en la lista, recordar que todas comienzan en la posicion 0.</li> <li><code>length</code>: La longitud o cantidad de elementos que contiene la lista</li> </ul> <p>Sintaxis</p> <pre><code>nombre_lista = [elemento1, elemento2, elemento3,.. , elementoN]\n</code></pre>"},{"location":"10_Colecciones/#como-se-deben-nombrar-las-listas-buena-practica-o-convension","title":"Como se deben nombrar las listas (buena practica o convension)","text":"<ul> <li>El nombre de la varable que contanga una lista, debe ser en plural</li> <li>Puede contener la palabra **list_** o **_list**</li> </ul>"},{"location":"10_Colecciones/#21021-funciones-de-las-listas","title":"2.10.2.1 Funciones de las listas","text":"<p>Las lista son un objeto, por lo tanto cuenta con diversos metodos los cuales nos ayudan a interactuar con ellos:</p> <ul> <li><code>append(element)</code>:    Adds an element at the end of the list</li> <li><code>clear()</code>:    Removes all the elements from the list</li> <li><code>copy()</code>: Returns a copy of the list</li> <li><code>count(element)</code>: Returns the number of elements with the specified value</li> <li><code>extend(list)</code>:   Add the elements of a list (or any iterable), to the end of the current list</li> <li><code>index(element[,start[,end]])</code>:   Returns the index of the first element with the specified value</li> <li><code>insert(position, element)</code>:  Adds an element at the specified position</li> <li><code>pop([index])</code>:   Removes the element at the specified position</li> <li><code>remove(element)</code>:    Removes the first item with the specified value</li> <li><code>reverse()</code>:  Reverses the order of the list</li> <li><code>sort()</code>: Sorts the list</li> </ul> <pre><code># Declaro una lista con unas materias\nmaterias = ['analogicas', 'digitales', 'mediciones'] # lista de str\n\nprint(materias)\n\n#agregamos una materia mas a la lista\nmaterias.append('dibujo 3D')\n\n#imprimo la lista\nprint(materias)\n\n#creo otra lista\nmaterias2 = ['neumatica', 'mecanismos']\n\n# Extendemos la primer lista con la segunda\nmaterias.extend(materias2)\n\n#imprimo la lista\nprint(materias)\n\n#inserto una materia en la posicion 2\nmaterias.insert(2,'Matematicas')\n\n#imprimo la lista\nprint(materias)\n\n#removemos el elemento 'Matematicas'\nmaterias.remove(\"Matematicas\")\n\n#imprimo la lista\nprint(materias)\n\n# Ordenamos las lista\nmaterias.sort()\n\n#imprimo la lista\nprint(materias)\n\n# sacamos un elemento de la lista, si no se especifica saca al ultimo\nultima_materia = materias.pop()\n\n#imprimo la lista\nprint(materias)\n\nprint('ultima materia:', ultima_materia)\n\n# Invierto el orden de la lista\nmaterias.reverse()\n\n#imprimo la lista\nprint(materias)\n</code></pre> <pre><code>['analogicas', 'digitales', 'mediciones']\n['analogicas', 'digitales', 'mediciones', 'dibujo 3D']\n['analogicas', 'digitales', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos']\n['analogicas', 'digitales', 'Matematicas', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos']\n['analogicas', 'digitales', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos']\n['analogicas', 'dibujo 3D', 'digitales', 'mecanismos', 'mediciones', 'neumatica']\n['analogicas', 'dibujo 3D', 'digitales', 'mecanismos', 'mediciones']\nultima materia: neumatica\n['mediciones', 'mecanismos', 'digitales', 'dibujo 3D', 'analogicas']\n</code></pre>"},{"location":"10_Colecciones/#obteniendo-los-datos-de-una-lista","title":"Obteniendo los datos de una lista","text":"<p>Sintaxis</p> <pre><code>    variable = nombre_lista [ posicion ]\n</code></pre> <pre><code>#Acceso a los datos de la lista\n\nmateria1 = materias[0]\nmateria2 = materias[1]\nmateria3 = materias[2]\nmateria4 = materias[3]\n\nprint(materia1)\nprint(materia2)\nprint(materia3)\nprint(materia4)\n</code></pre> <pre><code>mediciones\nmecanismos\ndigitales\ndibujo 3D\n</code></pre> <pre><code># Recorriendo una lista con FOR\n\nfor materia in materias:\n    print('La materia es: ', materia)\n\nprint('*********************')\n\n# Recorriendo una lista con WHILE\n\ncount = 0\n\nwhile count &lt; len(materias):\n    materia = materias[count]\n    print('La materia es: ',materia)\n    count +=1\n</code></pre> <pre><code>La materia es:  mediciones\nLa materia es:  mecanismos\nLa materia es:  digitales\nLa materia es:  dibujo 3D\nLa materia es:  analogicas\n*********************\nLa materia es:  mediciones\nLa materia es:  mecanismos\nLa materia es:  digitales\nLa materia es:  dibujo 3D\nLa materia es:  analogicas\n</code></pre> <pre><code># Cosas adicionales que se pueden realizar con listas\n\n# obtener la suma de los valores contenidos en la lista\n\nvalores = [1,5,3,9,6,3,5,8,7,2,6,7,2,5,2,3,5,4,5]\n\nsuma = sum(valores)\nmaximo = max(valores)\nminimo = min(valores)\n\nprint(\"La suma:\", suma)\nprint(\"El valor maximo:\", maximo)\nprint(\"El valor minimo:\", minimo)\n</code></pre> <pre><code>La suma: 88\nEl valor maximo: 9\nEl valor minimo: 1\n</code></pre>"},{"location":"10_Colecciones/#ejercicios","title":"Ejercicios","text":"<ol> <li> <p>Crear una lista de frutas: manzana, platano y melon. Posteriormete agregar sandia. Despues agregarle una lista mas que contenga papaya, kiwi y durazno. He imprimir la lista completa. Despues remover la sandia e imprimir el resultado. Recorrer la lista de frutas imprimiendo cada una (usando un ciclo, de preferencia usar for).</p> </li> <li> <p>Crear una lista con sus calificaciones de Neumatica, y obtener el promedio. Se debe utilizar la funci\u00f3n <code>sum</code> para el procedimiento. Imprimir cual es la calificacion maxima y minima, usando las funciones <code>max()</code> y <code>min()</code></p> </li> </ol>"},{"location":"10_Colecciones/#eliminando-elementos-de-la-lista-del","title":"Eliminando elementos de la lista <code>del</code>","text":"<p>Cuando queremos eliminar algun elemento de una coleccion se usa la palabra reservada <code>del</code> junto a la posicion del elemento a eliminar.</p> <p>Sintaxis</p> <ul> <li><code>del coleccion[posicion|key]</code></li> </ul> <pre><code># Eliminar elementos de una coleccion\n\nmaterias = ['analogica', 'digitales', 'mediciones' ]\n\nprint(materias)\n\ndel materias[1] # Elimino el elemento que esta en la posicion 1 de la coleccion\n\nprint(materias)\n\n\nalumnos = { 'carlos':[8,8,9] , 'angel':[8,8,8] }\n\nprint(alumnos)\n\ndel alumnos['carlos']\n\nprint(alumnos)\n</code></pre>"},{"location":"10_Colecciones/#funcion-len","title":"Funci\u00f3n <code>len</code>","text":"<p>Los iteradores por default no te dicen cual es su largo, en muchas ocasiones necesitamos saber el largo para realizar ciertas tareas, para eso Python trae una funci\u00f3n que nos ayuda.</p> <p>Sintaxis</p> <ul> <li><code>len(iterator)</code>: Devuelve el numero de los elementos de una coleccion</li> </ul> <pre><code># Ejemplos de aplicacion de la funci\u00f3n len()\n\nstring = 'hola'\nstr_len = len(string)\n\ntupla = (5,9,3,6,'mensaje')\ntupla_len = len(tupla)\n\nlista = [1,2,3,6,'hola']\nlista_len = len(lista)\n\ndiccionario = {'key1': 'valor1', 'key2': 'valor2', 'key3': 'valor3' }\ndic_len = len(diccionario)\n\nprint('largo de str',str_len)\nprint('largo de tupla',tupla_len)\nprint('largo de lista',lista_len)\nprint('largo de diccionario',dic_len)\n</code></pre> <pre><code>largo de str 4\nlargo de tupla 5\nlargo de lista 5\nlargo de diccionario 3\n</code></pre> <pre><code>especialidades = [\n    'mecatronica',\n    'laboratorio',\n    'contanbilidad',\n    'mecanica',\n    'electricidad'\n    ]\n\ncount = 0\n\nwhile count &lt; len(especialidades):\n    especialidad = especialidades[count]\n    print(f'Una de las especialidades es: {especialidad}')\n    count+=1\n</code></pre> <pre><code>Una de las especialidades es: mecatronica\nUna de las especialidades es: laboratorio\nUna de las especialidades es: contanbilidad\nUna de las especialidades es: mecanica\nUna de las especialidades es: electricidad\n</code></pre> <pre><code>import random\n#Creando un pesudobot\n\n#declaramos una lista con las frases que queremos decir con nuestro bot\nhobbies = ['leer', 'correr', 'nadar']\n\n\nprint('Hola, me llamo BotPy')\nprint('Cual es tu nombre')\nname = input()\n\nprint(f'Es un gusto concerte {name}')\nprint('Que lindo nombre tienes ;)')\n\nprint('Cual es tu hobby?')\nhobby = input()\n\nprint(f'Wow!!!! que conincidencia, a mi tambien me encanta {hobby}')\nprint(f'Te cuento que tambien me gusta mucho {random.choice(hobbies)}')\n</code></pre> <pre><code>Hola, me llamo BotPy\nCual es tu nombre\n\n\n\n---------------------------------------------------------------------------\n\nKeyboardInterrupt                         Traceback (most recent call last)\n\n/tmp/ipykernel_30200/981218890.py in &lt;module&gt;\n      8 print('Hola, me llamo BotPy')\n      9 print('Cual es tu nombre')\n---&gt; 10 name = input()\n     11\n     12 print(f'Es un gusto concerte {name}')\n\n\n~/Downloads/Cursos/Python/lib/python3.7/site-packages/ipykernel/kernelbase.py in raw_input(self, prompt)\n    983             self._parent_ident[\"shell\"],\n    984             self.get_parent(\"shell\"),\n--&gt; 985             password=False,\n    986         )\n    987\n\n\n~/Downloads/Cursos/Python/lib/python3.7/site-packages/ipykernel/kernelbase.py in _input_request(self, prompt, ident, parent, password)\n   1024             except KeyboardInterrupt:\n   1025                 # re-raise KeyboardInterrupt, to truncate traceback\n-&gt; 1026                 raise KeyboardInterrupt(\"Interrupted by user\") from None\n   1027             except Exception as e:\n   1028                 self.log.warning(\"Invalid Message:\", exc_info=True)\n\n\nKeyboardInterrupt: Interrupted by user\n</code></pre>"},{"location":"10_Colecciones/#103-diccionarios","title":"10.3 Diccionarios","text":"<p>Son un tipo de coleccion que su estructura es <code>Llave - Valor</code>. Para obtener el acceso al valor se hace a traves de la llave. La llave es unica y por lo tanto no se puede repetir.</p> <p>Sintaxis</p> <pre><code># Creacion de un diccionario\n    diccionario = {\n        'llave1': 'str',\n        'llave2' : 5\n        'llave3' : True,\n        'llave4' : [1,2,6,'a']\n        ......\n    }\n\n# Leyendo datos del diccionario\n\nvariable1 = diccionario['llave3'] # True\nvariable1 = diccionario.get('llave3') # True, en caso que no exista devuelve None\n\n# Modificando valores existentes en el diccionario\n\ndiccionario['llave4'] = [1,2,6,8,5,6]\n\n# Agregando valores nuevos al diccionario\n\ndiccionario['llave5'] = 'un valor'\n</code></pre> <pre><code>calificaciones_neumatica = {\n    'gamas': 9,\n    'angelo': 8,\n    'dania' : 10\n}\n\nprint(calificaciones_neumatica['gamas'] )\nprint(calificaciones_neumatica['angelo'] )\nprint(calificaciones_neumatica['dania'] )\n\ncalificaciones_neumatica['leon'] = 10 # agregando un valor al diccionario\n\nprint(calificaciones_neumatica['leon'])\n\ncalificaciones_neumatica['angelo'] = 7 # actualizo el valor de esa llave\n\nprint(calificaciones_neumatica['angelo'])\n</code></pre> <pre><code>9\n8\n10\n10\n7\n</code></pre> <pre><code>for key in calificaciones_neumatica:\n    print(f'con la llave: {key}, el valor es: {calificaciones_neumatica[key]}')\n\nprint('=======================')\n\n# Extraigo todas las llaves\nfor key in calificaciones_neumatica.keys():\n    print(key)\n\nprint('=======================')\n\n# Extraigo los valores\nfor values in calificaciones_neumatica.values():\n    print(values)\n</code></pre> <pre><code>con la llave: gamas, el valor es: 9\ncon la llave: angelo, el valor es: 7\ncon la llave: dania, el valor es: 10\ncon la llave: leon, el valor es: 10\n=======================\ngamas\nangelo\ndania\nleon\n=======================\n9\n7\n10\n10\n</code></pre>"},{"location":"10_Colecciones/#funcion-tuple","title":"Funci\u00f3n <code>tuple()</code>","text":"<p>La funci\u00f3n tuple crea una instancia de una tupla vacia si no le pasamos ningun argumento. El argumento que puede recibir una coleccion.</p> <pre><code>mi_tupla = tuple() # crea una tupla vacia\n\ncalificaciones = [8,6,9,6,8]\n\ntupla_calificaciones = tuple(calificaciones)\n\ntype(mi_tupla)\n\nprint(calificaciones)\nprint(tupla_calificaciones)\n</code></pre> <pre><code>[8, 6, 9, 6, 8]\n(8, 6, 9, 6, 8)\n</code></pre>"},{"location":"10_Colecciones/#funcion-list","title":"Funci\u00f3n <code>list()</code>","text":"<p>La funci\u00f3n list crea una instancia de una lista vacia si no le pasamos ningun argumento. El argumento que puede recibir una coleccion.</p> <pre><code>lista_vacia = list()\n\nprint(lista_vacia)\n\ntupla_calificaciones = (8, 6, 9, 6, 8)\nlista_calificaciones = list(tupla_calificaciones)\n\nprint(tupla_calificaciones)\nprint(lista_calificaciones)\n</code></pre> <pre><code>[]\n(8, 6, 9, 6, 8)\n[8, 6, 9, 6, 8]\n</code></pre>"},{"location":"10_Colecciones/#funcion-dict","title":"Funci\u00f3n <code>dict()</code>","text":"<p>La funci\u00f3n dict crea una instancia de un diccionario vacio si no le pasamos ningun argumento. El argumento que puede recibir una coleccion.</p> <pre><code>mi_diccionario = dict()\n\nprint(mi_diccionario)\n\nmi_diccionario['hola'] = 4\n\nprint(mi_diccionario)\n</code></pre> <pre><code>{}\n{'hola': 4}\n</code></pre>"},{"location":"10_Colecciones/#funcion-enumerate","title":"Funci\u00f3n <code>enumerate()</code>","text":"<p>A esta funci\u00f3n se le pasa un iterable y me devuelve 2 valores, en la primera posicion me pasa el indice y en la segunda posicion me pasa el valor que tiene en ese momento el iterador.</p> <p>Sintaxis:</p> <pre><code>index, value = enumerate(iterador)\n</code></pre> <pre><code>pokemons = ['pikachu', 'bolbasor', 'charizard' ]\n\n# Forma fea y horrible\ncount = 0\nfor pokemon in pokemons:\n    print(f'La posicion de {pokemon} es {count}')\n    count +=1\n\nprint('===================================')\n\n# La forma chida\nfor index, value in enumerate(pokemons):\n    print(f'La posicion de {value} es {index}')\n</code></pre> <pre><code>La posicion de pikachu es 0\nLa posicion de bolbasor es 1\nLa posicion de charizard es 2\n===================================\nLa posicion de pikachu es 0\nLa posicion de bolbasor es 1\nLa posicion de charizard es 2\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"11_Funciones/","title":"11 Funciones","text":""},{"location":"11_Funciones/#funciones","title":"Funciones","text":"<p>Bloque de c\u00f3digo reutilizable que puede ser llamado n cantidad de veces, debe ser corta,  hacer una sola cosa (resuelve un problema) y hacerla bien.</p>"},{"location":"11_Funciones/#como-se-nombran-las-funciones-buenas-practicas","title":"Como se nombran las funciones (Buenas practicas)","text":"<ul> <li>El nombre es una <code>acci\u00f3n</code> es decir un verbo</li> <li>El nombre debe ser en min\u00fasculas</li> <li>No tiene espacios el nombre, por lo tanto, son <code>separados por guion bajo(_)</code></li> </ul>"},{"location":"11_Funciones/#como-escribo-una-funcion-y-como-la-utilizo","title":"Como escribo una funci\u00f3n y como la utilizo","text":"<p>Sintaxis</p> <pre><code>def name_function():\n    #body function\n    #code block\n    #code block\n    #code block\n    #code block\n</code></pre> <p>Como la llamo a la funci\u00f3n:</p> <pre><code>name_function()\n</code></pre> <pre><code>def elevar_cuadrado():\n    '''Esta funci\u00f3n eleva al cuadrado el numero 2'''\n    cuadrado = 2 ** 2\n    print(cuadrado)\n\n\ndef saludar():\n    '''\n    Esta funci\u00f3n manda un saludo\n    '''\n    print('Hola a todos!!! xD')\n\nsaludar()\nelevar_cuadrado()\n</code></pre> <pre><code>Hola a todos!!! xD\n4\n</code></pre> <p>Ejercicios:</p> <ol> <li> <p>Realizar una funci\u00f3n que en su cuerpo realice la suma de dos n\u00fameros (estos est\u00e1n dados por ustedes), e imprimir el resultado, es decir, cuando se invoque</p> </li> <li> <p>Realizar una funci\u00f3n que en su cuerpo realice la impresi\u00f3n de 3 mensajes, los que ustedes quieran, y al invocarla que salgan esos mensajes</p> </li> </ol>"},{"location":"11_Funciones/#funciones-con-parametros","title":"Funciones con par\u00e1metros","text":"<p>Las funciones en ocasiones necesitan par\u00e1metros para funcionar y poder realizar la acci\u00f3n.</p> <p>Par\u00e1metro = Argumento = variable</p> <p>Como escribo una funci\u00f3n y como la utilizo</p> <p>Sintaxis</p> <pre><code>def name_function(argumeto1, argumentos2, ..., argumentosN):\n    #body function\n    #code block\n    #code block\n    #code block\n    #code block\n</code></pre> <p>Como la llamo a la funcion, coloco su nombre, abro parentesis y coloco los argumentos que necesita:</p> <pre><code>name_function(arg1, arg2...)\n</code></pre> <pre><code># base ^ potencia   -&gt; 2^3 = 8\n\ndef potencia(base:float, potencia:int):\n    resultado = base ** potencia\n    print(f'{base} elevado a la {potencia} es: {resultado}')\n\n\ndef saludo2(nombre:str):\n    '''Funci\u00f3n que imprime un mensaje personalizado'''\n    print(f'Hola {nombre}, que chido es conocerte!!!')\n\nsaludo2('Axel')\nsaludo2('Melani')\nsaludo2('David')\nsaludo2('Raul')\n\npotencia(2,3)\npotencia(3,3)\n</code></pre> <pre><code>Hola Axel, que chido es conocerte!!!\nHola Melani, que chido es conocerte!!!\nHola David, que chido es conocerte!!!\nHola Raul, que chido es conocerte!!!\n2 elevado a la 3 es: 8\n3 elevado a la 3 es: 27\n</code></pre> <p>Ejercicios:</p> <ol> <li> <p>Realizar una funci\u00f3n que realice el calculo del area del circulo, la funci\u00f3n recibe el radio. Ocupando las funciones de la libreria <code>math</code>.</p> </li> <li> <p>Realizar una funci\u00f3n que reciba el nombre y la edad, y que imprima un mensaje con estos datos, ejemplo: \"Hola 'alejandro'  que buena onda que tengas '20' anios\"</p> </li> </ol>"},{"location":"11_Funciones/#funciones-con-parametros-por-default-u-opcionales","title":"Funciones con parametros por default u opcionales","text":"<p>Las funciones en ocasiones necesitan parametros para funcionar, pero no es necesario pasarle todos los parametros requeridos, dado que pueden ser opcionales y poder realizar la acci\u00f3n.</p> <p>Parametro = Argumento = variable</p> <p>Como escribo una funci\u00f3n y como la utilizo</p> <p>Sintaxis</p> <pre><code>def name_function(argumeto1=valor, argumentos2=valor, ..., argumentosN=valorN):\n    #body function\n    #code block\n    #code block\n    #code block\n    #code block\n</code></pre> <p>Como la llamo a la funcion, coloco su nombre, abro parentesis y coloco los argumentos que necesita:</p> <pre><code>name_function(arg1, ... [arg2])\n</code></pre> <pre><code>def saludo3(nombre:str = 'Desconocido'):\n    '''Funci\u00f3n que imprime un mensaje personalizado'''\n    print(f'Hola {nombre}, que chido es conocerte!!!')\n\ndef potencia2(base=1, potencia = 2):\n    '''Por default eleva al cuadrado la base'''\n    resultado = pow(base, potencia)\n    print(resultado)\n\ndef imprimir_0_10(tope=10):\n    print('--------------------')\n    for i in range(tope+1):\n        print(i)\n    print('--------------------')\n\nsaludo3()\nsaludo3('Ricardo')\n\npotencia2()\npotencia2(3)\npotencia2(3,3)\npotencia2(3,4)\n\nimprimir_0_10(1)\n</code></pre> <pre><code>Hola Desconocido, que chido es conocerte!!!\nHola Ricardo, que chido es conocerte!!!\n1\n9\n27\n81\n--------------------\n0\n1\n--------------------\n</code></pre> <p>Ejercicios:</p> <ol> <li>Crear una funci\u00f3n que reciba la edad, pero la edad es opcion, por default que tenga el valor de 15, y que mande a imprimir si es menor o mayor de edad, pero si es 15, que imprima tambien, la frase \"Creo que no me pasaste la edad, tramposo!\"</li> <li>Crear una funci\u00f3n que calcule el area de cuadrados y rectangulos, la funci\u00f3n recibe 2 parametros, la base y la altura, pero cuando es cuadrado solo recibe uno, por lo tanto, el segundo parametros es opcional, el segundo parametros por default es 0.</li> </ol>"},{"location":"11_Funciones/#retornado-valores-de-una-funcion","title":"Retornado valores de una funcion","text":"<p>En ocasiones necesitamos que la funci\u00f3n nos devuelva informacion, es decir, que realice la operacion y nos devuelva ese resultado, para ello ocupamos la palabra reservada <code>return</code>. El valor que devuelve normalmente lo debemos guardar.</p> <p>Como escribo una funci\u00f3n y como la utilizo</p> <p>Sintaxis</p> <pre><code>def name_function([argumeto1, argumentos2=valor, ..., argumentosN]):\n    #body function\n    #code block\n    #code block\n    #code block\n    #code block\n    return valor\n</code></pre> <p>Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita y ese resultado lo guardamos en una variable:</p> <pre><code>resultado = name_function([arg1, ... arg2])\n</code></pre> <pre><code>from math import pi\n\ndef mensaje_perzonalizado(nombre:str):\n    mensaje = f'Que onda {nombre}!!, la estamos pasando chido!!!'\n\n    return mensaje\n\ndef area_triangulo(base, altura):\n    area = (base * altura) /2\n    return area\n\nmensaje = mensaje_perzonalizado('Pricila')\n\nprint(mensaje)\n\nmensaje += ' vamos por la coca'\nprint(mensaje)\n\narea_t = area_triangulo(3,7)\nprint(f'El area del triangulo es: {area_t}')\n</code></pre> <pre><code>Que onda Pricila!!, la estamos pasando chido!!!\nQue onda Pricila!!, la estamos pasando chido!!! vamos por la coca\nEl area del triangulo es: 10.5\n</code></pre> <pre><code>def operaciones_circulo(radio, area='area'):\n    '''\n    Esta funci\u00f3n realiza la operaci\u00f3n del area o per\u00edmetro\n    en funci\u00f3n de la variable area\n    '''\n    if area == 'area':\n        return pi * pow(radio,2)\n    else:\n        return 2 * pi * radio\n\nprint(f\"El area es {operaciones_circulo(5,'area')}\")\nprint(f'El perimetro es {operaciones_circulo(5,\"perimetro\")}')\n</code></pre> <pre><code>---------------------------------------------------------------------------\n\nNameError                                 Traceback (most recent call last)\n\n/tmp/ipykernel_24695/2679705058.py in &lt;module&gt;\n      9         return 2 * pi * radio\n     10\n---&gt; 11 print(f\"El area es {operaciones_circulo(5,'area')}\")\n     12 print(f'El perimetro es {operaciones_circulo(5,\"perimetro\")}')\n\n\n/tmp/ipykernel_24695/2679705058.py in operaciones_circulo(radio, area)\n      5     '''\n      6     if area == 'area':\n----&gt; 7         return pi * pow(radio,2)\n      8     else:\n      9         return 2 * pi * radio\n\n\nNameError: name 'pi' is not defined\n</code></pre> <p>Ejercicios:</p> <ol> <li>Crear una funci\u00f3n que calcule el promedio, pasandole los 3 parciales y te devuelve el resultado. Despues indicar si aprobo o esta en recursa.</li> <li>Crear las funciones de ley de ohm, una que calcule resistencia, corriente y otra voltaje, pasando el parametro necesario: Ejemplo de aplicacion:<ul> <li>r = resistencia(10, 0.5)</li> <li>i = corriente(10, 1000)</li> <li>r = voltaje(10, 5)</li> </ul> </li> </ol>"},{"location":"11_Funciones/#funciones-con-parametros-nombrados","title":"Funciones con parametros nombrados","text":"<p>Normalmente pasamos argumentos a las funciones con un orden orden establecido, y el orden que le coloco el programador, pero hay una forma de poder los argumentos en un orden cual sea, pero se debe especificar que argumento es.</p> <p>Nota: Los parametros nombrados y tambien con valores por default van al final se colocan al final</p> <p>Como escribo una funci\u00f3n y como la utilizo.</p> <p>Sintaxis</p> <p><pre><code>def name_function(variable1, variable2 = 'str'):\n    #body function\n    #code block\n    #code block\n    #code block\n    #code block\n    return valor\n</code></pre> Como la llamo a la funcion, coloco su nombre, abro parentesis y coloco los argumentos que necesita indicando su nombre con su valor, sin importar el orden:</p> <pre><code>name_function(variable2='pokemon', variable1=10)\n</code></pre> <pre><code>def create_pokemon(name = 'unknown', power=0):\n    pokemon = f'Mi pokemo se llama {name} con un poder de {power}'\n    return pokemon\n\nprint( create_pokemon(power=25, name='pikachu'))\n</code></pre> <pre><code>Mi pokemo se llama pikachu con un poder de 25\n</code></pre>"},{"location":"11_Funciones/#devolviendo-varios-valores","title":"Devolviendo varios valores","text":"<p>Realizado por Docente: Alejandro Leyva</p>"},{"location":"12_Archivos/","title":"12 Archivos","text":""},{"location":"12_Archivos/#archivos","title":"Archivos","text":"<p>El manejo de archivos en Python es algo nativo, es decir, por default te da una utileria para comenzar a trabajar con ellos. Esto significa que podemos abrir y leer el contenido de un archivo plano de una manera muy sencilla y rapida.</p>"},{"location":"12_Archivos/#funcion-open","title":"Funci\u00f3n <code>open()</code>","text":"<p>Con solo abrir un archivo de Python podemos llamar a la funci\u00f3n <code>open</code> la cual le indicamos la ruta del archivo que queremos abrir y cargar su informacion, junto con el modo en que lo vamos a utilizar.</p> <p>Sintaxis:</p> <pre><code>    open(ruta_archivo,modo,encoding)\n</code></pre> <p>Parametros:</p> <ul> <li><code>ruta_archivo</code>: Es la ruta del archivo que se va a carga, la ruta puede ser relativa o absoluta</li> <li><code>modo</code>: El modo es como se manejara el archivo, los modos son:<ul> <li><code>r</code>: Read - Valor por default. Abre el archivo para leerlo. Lanza error en caso que no exista.</li> <li><code>w</code>: Write - Abre el archivo para leerlo, en caso que no exista lo creara.</li> <li><code>a</code>: Append - Abre el archivo y todo lo que vayamos a escribir se lo agregara.</li> <li><code>x</code>: Create - Crear el archivo, lanza error en caso que exista.</li> <li><code>+</code>: Read-Write - Indica que tenemos el modo lectura y que podemos escribir en \u00e9l.</li> <li>Modos adicionales:<ul> <li><code>t</code>: text (Valor por default)- Indica que el archivo es un texto plano.</li> <li><code>b</code>: binario - Indica que es otro tipo de archivo, ejemplo: imagenes, archivos de word, excel, etc.</li> </ul> </li> </ul> </li> <li><code>encoding</code>: Formato de codificacion de caracteres. Por default no tiene, pero en nuestro caso que hablamos espa\u00f1ol, es combeniente colocar <code>utf-8</code>, con esto identifica acentos y todo lo relacionado al lenguaje.</li> <li>return <code>file</code>: Regresa un Objeto tipo archivo.</li> </ul> <p>Documentacion open()</p>"},{"location":"12_Archivos/#metodos-de-los-arhivos","title":"Metodos de los arhivos","text":"<p>Los archivos tiene diversos metodos para manipular su contenido</p> <ul> <li><code>read([count])</code>: Lee todo el contenido del archivo y lo carga en memoria. Si indicamos el contador, solo lee esa cantidad de caracteres.</li> <li><code>readline()</code>: Lee una sola linea del archivo. Por default comienza en la primera.</li> <li><code>readlines()</code>: Crea una lista con el contenido de cada linea del archivo.</li> <li><code>write(data)</code>: Escribe lo que le pasamos como argumento.</li> <li><code>seek(position)</code>: Coloca el cursor en esa posicion dentro del archivo.</li> <li><code>close()</code>: Cierra el archivo. Esto siempre se debe hacer si se usa el metodo <code>open()</code> solo.</li> </ul> <p>Nota: Contiene mas metodos, ir a la documentacion oficial de IO</p> <pre><code># Creando un archivo vacio\nfile_name = 'archivo.txt'\n\nmi_archivo = open(file_name,'w') #aqui el archivo se crea y esta listo para escribir en \u00e9l\n\nmi_archivo.close() # tenemos que cerrar el archivo\n</code></pre> <pre><code>mi_archivo = open(file_name, mode='w+', encoding='utf-8')\n\nmi_archivo.write(\"estoy escribiendo el archivo plano\\n\")\nmi_archivo.write(\"esto es el manejo de archivos en python\\n\")\n\nmi_archivo.close()\n</code></pre> <pre><code>csv = open('datos.csv', mode='w+', encoding='utf-8')\n\ncsv.write('dato1,dato2,dato3\\n')\ncsv.write('dato1,dato2,dato3\\n')\ncsv.write('dato1,dato2,dato3\\n')\ncsv.write('dato1,dato2,dato3\\n')\n\ncsv.close()\n</code></pre> <pre><code>archivo = open('archivo.txt', mode='r', encoding='utf-8')\n\nprint(archivo.readline())\nprint(archivo.readline())\n</code></pre> <pre><code>estoy escribiendo el archivo plano\n\nesto es el manejo de archivos en python\n</code></pre>"},{"location":"12_Archivos/#bloque-with","title":"Bloque <code>with</code>","text":"<p>Tenemos una palabra reservada <code>with</code> la cual nos facilita abrir un archivo y lo cierra en automatico al salir del bloque. Es decir, <code>with</code> toma la gestion de los archivos y nosotros nos enfocamos en utilizar la informacion obtenida de \u00e9l. Lo mas recomendable es usar la palabra <code>with</code> con los archivos.</p> <p>Sintaxis: <pre><code>    with EXPRESSION as TARGET:\n        SUITE\n</code></pre></p> <pre><code>    # Aplicado a archivos\n    with open('ruta','modo') as nombre_variable:\n        # c\u00f3digo para manipular el archivo\n</code></pre> <p>Documentacion de The with statement</p> <pre><code>with open('datos.csv', mode='r', encoding='utf-8') as archivo_csv:\n    for line in archivo_csv.readlines():\n        print(line)\n</code></pre> <pre><code>dato1,dato2,dato3\n\ndato10,dato20,dato30\n\ndato11,dato21,dato31\n\ndato12,dato22,dato32\n</code></pre> <p>Realizado por Docente: Alejandro Leyva</p>"}]}